### YamlMime:ManagedReference
items:
- uid: Gameplay.Core.HeapQueue`1
  commentId: T:Gameplay.Core.HeapQueue`1
  id: HeapQueue`1
  parent: Gameplay.Core
  children:
  - Gameplay.Core.HeapQueue`1.#ctor
  - Gameplay.Core.HeapQueue`1.Clear
  - Gameplay.Core.HeapQueue`1.Contains(`0)
  - Gameplay.Core.HeapQueue`1.Count
  - Gameplay.Core.HeapQueue`1.First
  - Gameplay.Core.HeapQueue`1.IsEmpty
  - Gameplay.Core.HeapQueue`1.Peek
  - Gameplay.Core.HeapQueue`1.Pop
  - Gameplay.Core.HeapQueue`1.Push(`0)
  - Gameplay.Core.HeapQueue`1.Remove(`0)
  langs:
  - csharp
  - vb
  name: HeapQueue<T>
  nameWithType: HeapQueue<T>
  fullName: Gameplay.Core.HeapQueue<T>
  type: Class
  source:
    id: HeapQueue
    path: ''
    startLine: 41
  assemblies:
  - cs.temp.dll
  namespace: Gameplay.Core
  summary: "\nHeapQueue provides a queue collection that is always ordered.\n"
  example: []
  syntax:
    content: >-
      public class HeapQueue<T>
          where T : IComparable<T>
    typeParameters:
    - id: T
      description: ''
    content.vb: Public Class HeapQueue(Of T As IComparable(Of T))
  inheritance:
  - System.Object
  nameWithType.vb: HeapQueue(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Gameplay.Core.HeapQueue(Of T)
  name.vb: HeapQueue(Of T)
- uid: Gameplay.Core.HeapQueue`1.Count
  commentId: P:Gameplay.Core.HeapQueue`1.Count
  id: Count
  parent: Gameplay.Core.HeapQueue`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: HeapQueue<T>.Count
  fullName: Gameplay.Core.HeapQueue<T>.Count
  type: Property
  source:
    id: Count
    path: ''
    startLine: 45
  assemblies:
  - cs.temp.dll
  namespace: Gameplay.Core
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: Gameplay.Core.HeapQueue`1.Count*
  nameWithType.vb: HeapQueue(Of T).Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Gameplay.Core.HeapQueue(Of T).Count
- uid: Gameplay.Core.HeapQueue`1.IsEmpty
  commentId: P:Gameplay.Core.HeapQueue`1.IsEmpty
  id: IsEmpty
  parent: Gameplay.Core.HeapQueue`1
  langs:
  - csharp
  - vb
  name: IsEmpty
  nameWithType: HeapQueue<T>.IsEmpty
  fullName: Gameplay.Core.HeapQueue<T>.IsEmpty
  type: Property
  source:
    id: IsEmpty
    path: ''
    startLine: 47
  assemblies:
  - cs.temp.dll
  namespace: Gameplay.Core
  syntax:
    content: public bool IsEmpty { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsEmpty As Boolean
  overload: Gameplay.Core.HeapQueue`1.IsEmpty*
  nameWithType.vb: HeapQueue(Of T).IsEmpty
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Gameplay.Core.HeapQueue(Of T).IsEmpty
- uid: Gameplay.Core.HeapQueue`1.First
  commentId: P:Gameplay.Core.HeapQueue`1.First
  id: First
  parent: Gameplay.Core.HeapQueue`1
  langs:
  - csharp
  - vb
  name: First
  nameWithType: HeapQueue<T>.First
  fullName: Gameplay.Core.HeapQueue<T>.First
  type: Property
  source:
    id: First
    path: ''
    startLine: 49
  assemblies:
  - cs.temp.dll
  namespace: Gameplay.Core
  syntax:
    content: public T First { get; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public ReadOnly Property First As T
  overload: Gameplay.Core.HeapQueue`1.First*
  nameWithType.vb: HeapQueue(Of T).First
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Gameplay.Core.HeapQueue(Of T).First
- uid: Gameplay.Core.HeapQueue`1.Clear
  commentId: M:Gameplay.Core.HeapQueue`1.Clear
  id: Clear
  parent: Gameplay.Core.HeapQueue`1
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: HeapQueue<T>.Clear()
  fullName: Gameplay.Core.HeapQueue<T>.Clear()
  type: Method
  source:
    id: Clear
    path: ''
    startLine: 51
  assemblies:
  - cs.temp.dll
  namespace: Gameplay.Core
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: Gameplay.Core.HeapQueue`1.Clear*
  nameWithType.vb: HeapQueue(Of T).Clear()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Gameplay.Core.HeapQueue(Of T).Clear()
- uid: Gameplay.Core.HeapQueue`1.Contains(`0)
  commentId: M:Gameplay.Core.HeapQueue`1.Contains(`0)
  id: Contains(`0)
  parent: Gameplay.Core.HeapQueue`1
  langs:
  - csharp
  - vb
  name: Contains(T)
  nameWithType: HeapQueue<T>.Contains(T)
  fullName: Gameplay.Core.HeapQueue<T>.Contains(T)
  type: Method
  source:
    id: Contains
    path: ''
    startLine: 53
  assemblies:
  - cs.temp.dll
  namespace: Gameplay.Core
  syntax:
    content: public bool Contains(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Function Contains(item As T) As Boolean
  overload: Gameplay.Core.HeapQueue`1.Contains*
  nameWithType.vb: HeapQueue(Of T).Contains(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Gameplay.Core.HeapQueue(Of T).Contains(T)
- uid: Gameplay.Core.HeapQueue`1.Remove(`0)
  commentId: M:Gameplay.Core.HeapQueue`1.Remove(`0)
  id: Remove(`0)
  parent: Gameplay.Core.HeapQueue`1
  langs:
  - csharp
  - vb
  name: Remove(T)
  nameWithType: HeapQueue<T>.Remove(T)
  fullName: Gameplay.Core.HeapQueue<T>.Remove(T)
  type: Method
  source:
    id: Remove
    path: ''
    startLine: 55
  assemblies:
  - cs.temp.dll
  namespace: Gameplay.Core
  syntax:
    content: public void Remove(T item)
    parameters:
    - id: item
      type: '{T}'
    content.vb: Public Sub Remove(item As T)
  overload: Gameplay.Core.HeapQueue`1.Remove*
  nameWithType.vb: HeapQueue(Of T).Remove(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Gameplay.Core.HeapQueue(Of T).Remove(T)
- uid: Gameplay.Core.HeapQueue`1.Peek
  commentId: M:Gameplay.Core.HeapQueue`1.Peek
  id: Peek
  parent: Gameplay.Core.HeapQueue`1
  langs:
  - csharp
  - vb
  name: Peek()
  nameWithType: HeapQueue<T>.Peek()
  fullName: Gameplay.Core.HeapQueue<T>.Peek()
  type: Method
  source:
    id: Peek
    path: ''
    startLine: 57
  assemblies:
  - cs.temp.dll
  namespace: Gameplay.Core
  syntax:
    content: public T Peek()
    return:
      type: '{T}'
    content.vb: Public Function Peek As T
  overload: Gameplay.Core.HeapQueue`1.Peek*
  nameWithType.vb: HeapQueue(Of T).Peek()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Gameplay.Core.HeapQueue(Of T).Peek()
- uid: Gameplay.Core.HeapQueue`1.#ctor
  commentId: M:Gameplay.Core.HeapQueue`1.#ctor
  id: '#ctor'
  parent: Gameplay.Core.HeapQueue`1
  langs:
  - csharp
  - vb
  name: HeapQueue()
  nameWithType: HeapQueue<T>.HeapQueue()
  fullName: Gameplay.Core.HeapQueue<T>.HeapQueue()
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 59
  assemblies:
  - cs.temp.dll
  namespace: Gameplay.Core
  syntax:
    content: public HeapQueue()
    content.vb: Public Sub New
  overload: Gameplay.Core.HeapQueue`1.#ctor*
  nameWithType.vb: HeapQueue(Of T).HeapQueue()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Gameplay.Core.HeapQueue(Of T).HeapQueue()
- uid: Gameplay.Core.HeapQueue`1.Push(`0)
  commentId: M:Gameplay.Core.HeapQueue`1.Push(`0)
  id: Push(`0)
  parent: Gameplay.Core.HeapQueue`1
  langs:
  - csharp
  - vb
  name: Push(T)
  nameWithType: HeapQueue<T>.Push(T)
  fullName: Gameplay.Core.HeapQueue<T>.Push(T)
  type: Method
  source:
    id: Push
    path: ''
    startLine: 64
  assemblies:
  - cs.temp.dll
  namespace: Gameplay.Core
  syntax:
    content: public void Push(T item)
    parameters:
    - id: item
      type: '{T}'
    content.vb: Public Sub Push(item As T)
  overload: Gameplay.Core.HeapQueue`1.Push*
  nameWithType.vb: HeapQueue(Of T).Push(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Gameplay.Core.HeapQueue(Of T).Push(T)
- uid: Gameplay.Core.HeapQueue`1.Pop
  commentId: M:Gameplay.Core.HeapQueue`1.Pop
  id: Pop
  parent: Gameplay.Core.HeapQueue`1
  langs:
  - csharp
  - vb
  name: Pop()
  nameWithType: HeapQueue<T>.Pop()
  fullName: Gameplay.Core.HeapQueue<T>.Pop()
  type: Method
  source:
    id: Pop
    path: ''
    startLine: 72
  assemblies:
  - cs.temp.dll
  namespace: Gameplay.Core
  syntax:
    content: public T Pop()
    return:
      type: '{T}'
    content.vb: Public Function Pop As T
  overload: Gameplay.Core.HeapQueue`1.Pop*
  nameWithType.vb: HeapQueue(Of T).Pop()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Gameplay.Core.HeapQueue(Of T).Pop()
references:
- uid: Gameplay.Core
  commentId: N:Gameplay.Core
  name: Gameplay.Core
  nameWithType: Gameplay.Core
  fullName: Gameplay.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Gameplay.Core.HeapQueue`1.Count*
  commentId: Overload:Gameplay.Core.HeapQueue`1.Count
  name: Count
  nameWithType: HeapQueue<T>.Count
  fullName: Gameplay.Core.HeapQueue<T>.Count
  nameWithType.vb: HeapQueue(Of T).Count
  fullName.vb: Gameplay.Core.HeapQueue(Of T).Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Gameplay.Core.HeapQueue`1.IsEmpty*
  commentId: Overload:Gameplay.Core.HeapQueue`1.IsEmpty
  name: IsEmpty
  nameWithType: HeapQueue<T>.IsEmpty
  fullName: Gameplay.Core.HeapQueue<T>.IsEmpty
  nameWithType.vb: HeapQueue(Of T).IsEmpty
  fullName.vb: Gameplay.Core.HeapQueue(Of T).IsEmpty
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Gameplay.Core.HeapQueue`1.First*
  commentId: Overload:Gameplay.Core.HeapQueue`1.First
  name: First
  nameWithType: HeapQueue<T>.First
  fullName: Gameplay.Core.HeapQueue<T>.First
  nameWithType.vb: HeapQueue(Of T).First
  fullName.vb: Gameplay.Core.HeapQueue(Of T).First
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Gameplay.Core.HeapQueue`1.Clear*
  commentId: Overload:Gameplay.Core.HeapQueue`1.Clear
  name: Clear
  nameWithType: HeapQueue<T>.Clear
  fullName: Gameplay.Core.HeapQueue<T>.Clear
  nameWithType.vb: HeapQueue(Of T).Clear
  fullName.vb: Gameplay.Core.HeapQueue(Of T).Clear
- uid: Gameplay.Core.HeapQueue`1.Contains*
  commentId: Overload:Gameplay.Core.HeapQueue`1.Contains
  name: Contains
  nameWithType: HeapQueue<T>.Contains
  fullName: Gameplay.Core.HeapQueue<T>.Contains
  nameWithType.vb: HeapQueue(Of T).Contains
  fullName.vb: Gameplay.Core.HeapQueue(Of T).Contains
- uid: Gameplay.Core.HeapQueue`1.Remove*
  commentId: Overload:Gameplay.Core.HeapQueue`1.Remove
  name: Remove
  nameWithType: HeapQueue<T>.Remove
  fullName: Gameplay.Core.HeapQueue<T>.Remove
  nameWithType.vb: HeapQueue(Of T).Remove
  fullName.vb: Gameplay.Core.HeapQueue(Of T).Remove
- uid: Gameplay.Core.HeapQueue`1.Peek*
  commentId: Overload:Gameplay.Core.HeapQueue`1.Peek
  name: Peek
  nameWithType: HeapQueue<T>.Peek
  fullName: Gameplay.Core.HeapQueue<T>.Peek
  nameWithType.vb: HeapQueue(Of T).Peek
  fullName.vb: Gameplay.Core.HeapQueue(Of T).Peek
- uid: Gameplay.Core.HeapQueue`1.#ctor*
  commentId: Overload:Gameplay.Core.HeapQueue`1.#ctor
  name: HeapQueue
  nameWithType: HeapQueue<T>.HeapQueue
  fullName: Gameplay.Core.HeapQueue<T>.HeapQueue
  nameWithType.vb: HeapQueue(Of T).HeapQueue
  fullName.vb: Gameplay.Core.HeapQueue(Of T).HeapQueue
- uid: Gameplay.Core.HeapQueue`1.Push*
  commentId: Overload:Gameplay.Core.HeapQueue`1.Push
  name: Push
  nameWithType: HeapQueue<T>.Push
  fullName: Gameplay.Core.HeapQueue<T>.Push
  nameWithType.vb: HeapQueue(Of T).Push
  fullName.vb: Gameplay.Core.HeapQueue(Of T).Push
- uid: Gameplay.Core.HeapQueue`1.Pop*
  commentId: Overload:Gameplay.Core.HeapQueue`1.Pop
  name: Pop
  nameWithType: HeapQueue<T>.Pop
  fullName: Gameplay.Core.HeapQueue<T>.Pop
  nameWithType.vb: HeapQueue(Of T).Pop
  fullName.vb: Gameplay.Core.HeapQueue(Of T).Pop
