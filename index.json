{
  "api/Gameplay.Conrollers.ArcadeModeController.html": {
    "href": "api/Gameplay.Conrollers.ArcadeModeController.html",
    "title": "Class ArcadeModeController | Metro Connoisseur documentation",
    "keywords": "Class ArcadeModeController Selects and Manages question asking process. Contains all active and Inheritance Object BaseGameMode ArcadeModeController LearningModeController Namespace : Gameplay.Conrollers Assembly : cs.temp.dll.dll Syntax public class ArcadeModeController : BaseGameMode Fields game Declaration protected Game game Field Value Type Description Game main Declaration protected GameModeController main Field Value Type Description GameModeController MODE_ID Declaration public const string MODE_ID = \"arcade\" Field Value Type Description String model Declaration protected GameModel model Field Value Type Description GameModel renderer Declaration protected MetroRenderer renderer Field Value Type Description MetroRenderer uiGame Declaration protected UIGame uiGame Field Value Type Description UIGame Properties gameModeId Declaration public override string gameModeId { get; } Property Value Type Description String Overrides BaseGameMode.gameModeId Methods CheckAnswer() Declaration protected void CheckAnswer() ConfirmPressed() Declaration public override void ConfirmPressed() Overrides BaseGameMode.ConfirmPressed() ContinueSession(Game) Declaration public override void ContinueSession(Game gameState) Parameters Type Name Description Game gameState Overrides BaseGameMode.ContinueSession(Game) GetNextTip(Int32) Declaration public override string GetNextTip(int index) Parameters Type Name Description Int32 index Returns Type Description String Overrides BaseGameMode.GetNextTip(Int32) Init(GameModeController) Declaration public override void Init(GameModeController mainController) Parameters Type Name Description GameModeController mainController Overrides BaseGameMode.Init(GameModeController) InitGameState(Game) Declaration protected void InitGameState(Game gameState) Parameters Type Name Description Game gameState ManualUpdate() Declaration public override void ManualUpdate() Overrides BaseGameMode.ManualUpdate() OnRestStarted() Declaration protected virtual void OnRestStarted() ResumeGame() Declaration public void ResumeGame() SelectNextController() Declaration public void SelectNextController() SelectNextController(Int32) Declaration public void SelectNextController(int exclude) Parameters Type Name Description Int32 exclude SelectRegion() Declaration protected virtual Region SelectRegion() Returns Type Description Region SessionOver() Declaration public virtual void SessionOver() StartGamePressed() Declaration public override void StartGamePressed() Overrides BaseGameMode.StartGamePressed() StartNewSession(Game) Declaration public override void StartNewSession(Game gameState) Parameters Type Name Description Game gameState Overrides BaseGameMode.StartNewSession(Game) UpdateGameState(Boolean) Declaration protected virtual void UpdateGameState(bool result) Parameters Type Name Description Boolean result"
  },
  "api/Gameplay.Conrollers.BaseGameMode.html": {
    "href": "api/Gameplay.Conrollers.BaseGameMode.html",
    "title": "Class BaseGameMode | Metro Connoisseur documentation",
    "keywords": "Class BaseGameMode Inheritance Object BaseGameMode ArcadeModeController Namespace : Gameplay.Conrollers Assembly : cs.temp.dll.dll Syntax public abstract class BaseGameMode : MonoBehaviour Properties gameModeId Declaration public abstract string gameModeId { get; } Property Value Type Description String Methods ConfirmPressed() Declaration public abstract void ConfirmPressed() ContinueSession(Game) Declaration public abstract void ContinueSession(Game gameState) Parameters Type Name Description Game gameState GetNextTip(Int32) Declaration public abstract string GetNextTip(int index) Parameters Type Name Description Int32 index Returns Type Description String Init(GameModeController) Declaration public abstract void Init(GameModeController mainController) Parameters Type Name Description GameModeController mainController ManualUpdate() Declaration public abstract void ManualUpdate() StartGamePressed() Declaration public abstract void StartGamePressed() StartNewSession(Game) Declaration public abstract void StartNewSession(Game gameState) Parameters Type Name Description Game gameState"
  },
  "api/Gameplay.Conrollers.Game.html": {
    "href": "api/Gameplay.Conrollers.Game.html",
    "title": "Class Game | Metro Connoisseur documentation",
    "keywords": "Class Game Inheritance Object Game Namespace : Gameplay.Conrollers Assembly : cs.temp.dll.dll Syntax public class Game Fields answerTimeElapsed Declaration public float answerTimeElapsed Field Value Type Description Single ANY_QUESTIONS Declaration public const string ANY_QUESTIONS = \"any\" Field Value Type Description String attemptsLeft Declaration public int attemptsLeft Field Value Type Description Int32 correctAnswers Declaration public int correctAnswers Field Value Type Description Int32 currentGenerator Declaration public int currentGenerator Field Value Type Description Int32 currentQuestion Declaration public int currentQuestion Field Value Type Description Int32 currentRegion Declaration public Region currentRegion Field Value Type Description Region isPlaying Declaration public bool isPlaying Field Value Type Description Boolean maxQuestions Declaration public int maxQuestions Field Value Type Description Int32 mode Declaration public string mode Field Value Type Description String partialAttempts Declaration public int partialAttempts Field Value Type Description Int32 questionId Declaration public string questionId Field Value Type Description String Methods Reset() Declaration public void Reset()"
  },
  "api/Gameplay.Conrollers.GameController.html": {
    "href": "api/Gameplay.Conrollers.GameController.html",
    "title": "Class GameController | Metro Connoisseur documentation",
    "keywords": "Class GameController Main game controller Inheritance Object GameController Namespace : Gameplay.Conrollers Assembly : cs.temp.dll.dll Syntax public class GameController : MonoBehaviour Fields crossingMaterial Declaration public Material crossingMaterial Field Value Type Description Material highlightMaterial Declaration public Material highlightMaterial Field Value Type Description Material instance Declaration public static GameController instance Field Value Type Description GameController lineMaterial Declaration public Material lineMaterial Field Value Type Description Material model Declaration public GameModel model Field Value Type Description GameModel shouldBackCloseGame Declaration public bool shouldBackCloseGame Field Value Type Description Boolean tmpOutlineMaterial Declaration public Material tmpOutlineMaterial Field Value Type Description Material Properties theme Declaration public static Theme theme { get; } Property Value Type Description Theme"
  },
  "api/Gameplay.Conrollers.GameModeController.html": {
    "href": "api/Gameplay.Conrollers.GameModeController.html",
    "title": "Class GameModeController | Metro Connoisseur documentation",
    "keywords": "Class GameModeController Inheritance Object GameModeController Namespace : Gameplay.Conrollers Assembly : cs.temp.dll.dll Syntax public class GameModeController : MonoBehaviour Fields currentGameMode Declaration public string currentGameMode Field Value Type Description String gameState Declaration public Game gameState Field Value Type Description Game questionGenerators Declaration public List<BaseQuestionGenerator> questionGenerators Field Value Type Description List < BaseQuestionGenerator > questionUI Declaration public List<BaseUIQuestion> questionUI Field Value Type Description List < BaseUIQuestion > Methods ConfirmPressed() Declaration public void ConfirmPressed() GetGenerator(Int32) Declaration public BaseQuestionGenerator GetGenerator(int index) Parameters Type Name Description Int32 index Returns Type Description BaseQuestionGenerator GetNextTip(Int32) Declaration public string GetNextTip(int currentTip) Parameters Type Name Description Int32 currentTip Returns Type Description String GetUI(Int32) Declaration public BaseUIQuestion GetUI(int index) Parameters Type Name Description Int32 index Returns Type Description BaseUIQuestion SelectGenerator(Game, Int32) Declaration public void SelectGenerator(Game game, int exclude = -1) Parameters Type Name Description Game game Int32 exclude StartGame(Int32) Declaration public void StartGame(int gameModeId) Parameters Type Name Description Int32 gameModeId StartGame(String) Declaration public void StartGame(string gameModeId) Parameters Type Name Description String gameModeId StartGamePressed() Declaration public void StartGamePressed()"
  },
  "api/Gameplay.Conrollers.html": {
    "href": "api/Gameplay.Conrollers.html",
    "title": "Namespace Gameplay.Conrollers | Metro Connoisseur documentation",
    "keywords": "Namespace Gameplay.Conrollers Classes ArcadeModeController Selects and Manages question asking process. Contains all active and BaseGameMode Game GameController Main game controller GameModeController LearningModeController SaveDataBaseController<T> Base class for controllers that need to save data in a json file. SettingsController Controller that handles saving and loading player settings SettingsEntry Settings data model StatisticsController Manages statistics and achievements. Also saves and loads statistics data to disk Interfaces ISaveData Interface for data model classes for"
  },
  "api/Gameplay.Conrollers.ISaveData.html": {
    "href": "api/Gameplay.Conrollers.ISaveData.html",
    "title": "Interface ISaveData | Metro Connoisseur documentation",
    "keywords": "Interface ISaveData Interface for data model classes for Namespace : Gameplay.Conrollers Assembly : cs.temp.dll.dll Syntax public interface ISaveData Properties Version Declaration int Version { get; set; } Property Value Type Description Int32"
  },
  "api/Gameplay.Conrollers.LearningModeController.html": {
    "href": "api/Gameplay.Conrollers.LearningModeController.html",
    "title": "Class LearningModeController | Metro Connoisseur documentation",
    "keywords": "Class LearningModeController Inheritance Object BaseGameMode ArcadeModeController LearningModeController Inherited Members ArcadeModeController.uiGame ArcadeModeController.game ArcadeModeController.model ArcadeModeController.renderer ArcadeModeController.main ArcadeModeController.InitGameState(Game) ArcadeModeController.CheckAnswer() ArcadeModeController.SelectNextController() ArcadeModeController.SelectNextController(Int32) ArcadeModeController.ResumeGame() ArcadeModeController.GetNextTip(Int32) ArcadeModeController.ManualUpdate() Namespace : Gameplay.Conrollers Assembly : cs.temp.dll.dll Syntax public class LearningModeController : ArcadeModeController Fields maxQuestions Declaration public int maxQuestions Field Value Type Description Int32 minQuestions Declaration public int minQuestions Field Value Type Description Int32 MODE_ID Declaration public const string MODE_ID = \"learning\" Field Value Type Description String questionIncrement Declaration public int questionIncrement Field Value Type Description Int32 statistics Declaration protected StatisticsController statistics Field Value Type Description StatisticsController Properties gameModeId Declaration public override string gameModeId { get; } Property Value Type Description String Overrides ArcadeModeController.gameModeId Methods ConfirmPressed() Declaration public override void ConfirmPressed() Overrides ArcadeModeController.ConfirmPressed() ContinueSession(Game) Declaration public override void ContinueSession(Game gameState) Parameters Type Name Description Game gameState Overrides ArcadeModeController.ContinueSession(Game) Init(GameModeController) Declaration public override void Init(GameModeController mainController) Parameters Type Name Description GameModeController mainController Overrides ArcadeModeController.Init(GameModeController) OnRestStarted() Declaration protected override void OnRestStarted() Overrides ArcadeModeController.OnRestStarted() Purchase() Declaration public void Purchase() SelectRegion() Declaration protected override Region SelectRegion() Returns Type Description Region Overrides ArcadeModeController.SelectRegion() SessionOver() Declaration public override void SessionOver() Overrides ArcadeModeController.SessionOver() StartGamePressed() Declaration public override void StartGamePressed() Overrides ArcadeModeController.StartGamePressed() StartNewSession(Game) Declaration public override void StartNewSession(Game gameState) Parameters Type Name Description Game gameState Overrides ArcadeModeController.StartNewSession(Game) UpdateGameState(Boolean) Declaration protected override void UpdateGameState(bool result) Parameters Type Name Description Boolean result Overrides ArcadeModeController.UpdateGameState(Boolean)"
  },
  "api/Gameplay.Conrollers.SaveDataBaseController-1.html": {
    "href": "api/Gameplay.Conrollers.SaveDataBaseController-1.html",
    "title": "Class SaveDataBaseController<T> | Metro Connoisseur documentation",
    "keywords": "Class SaveDataBaseController<T> Base class for controllers that need to save data in a json file. Inheritance Object SaveDataBaseController<T> SettingsController StatisticsController Namespace : Gameplay.Conrollers Assembly : cs.temp.dll.dll Syntax public abstract class SaveDataBaseController<T> : MonoBehaviour where T : class, ISaveData, new() Type Parameters Name Description T Fields current Declaration public T current Field Value Type Description T Properties Filename Declaration public abstract string Filename { get; } Property Value Type Description String Version Declaration public abstract int Version { get; } Property Value Type Description Int32 Methods InitializeSaveData(T) Declaration public abstract void InitializeSaveData(T data) Parameters Type Name Description T data OnSaveDataLoaded() Declaration public abstract void OnSaveDataLoaded() OnVersionChanged(Int32) Declaration public abstract void OnVersionChanged(int oldVersion) Parameters Type Name Description Int32 oldVersion Save() Declaration protected void Save()"
  },
  "api/Gameplay.Conrollers.SettingsController.html": {
    "href": "api/Gameplay.Conrollers.SettingsController.html",
    "title": "Class SettingsController | Metro Connoisseur documentation",
    "keywords": "Class SettingsController Controller that handles saving and loading player settings Inheritance Object SaveDataBaseController < SettingsEntry > SettingsController Inherited Members SaveDataBaseController<SettingsEntry>.current SaveDataBaseController<SettingsEntry>.Save() Namespace : Gameplay.Conrollers Assembly : cs.temp.dll.dll Syntax public class SettingsController : SaveDataBaseController<SettingsEntry> Fields difficultyChanged Declaration public static Action<Difficulty> difficultyChanged Field Value Type Description Action < Difficulty > difficultyConfig Declaration public DifficultyConfig difficultyConfig Field Value Type Description DifficultyConfig palette Declaration public ColorPalette palette Field Value Type Description ColorPalette Properties currentDifficulty Declaration public Difficulty currentDifficulty { get; } Property Value Type Description Difficulty Filename Declaration public override string Filename { get; } Property Value Type Description String Overrides Gameplay.Conrollers.SaveDataBaseController<Gameplay.Conrollers.SettingsEntry>.Filename Version Declaration public override int Version { get; } Property Value Type Description Int32 Overrides Gameplay.Conrollers.SaveDataBaseController<Gameplay.Conrollers.SettingsEntry>.Version Methods InitializeSaveData(SettingsEntry) Declaration public override void InitializeSaveData(SettingsEntry data) Parameters Type Name Description SettingsEntry data Overrides Gameplay.Conrollers.SaveDataBaseController<Gameplay.Conrollers.SettingsEntry>.InitializeSaveData(Gameplay.Conrollers.SettingsEntry) MarkDirty() Declaration public void MarkDirty() OnSaveDataLoaded() Declaration public override void OnSaveDataLoaded() Overrides Gameplay.Conrollers.SaveDataBaseController<Gameplay.Conrollers.SettingsEntry>.OnSaveDataLoaded() OnVersionChanged(Int32) Declaration public override void OnVersionChanged(int oldVersion) Parameters Type Name Description Int32 oldVersion Overrides Gameplay.Conrollers.SaveDataBaseController<Gameplay.Conrollers.SettingsEntry>.OnVersionChanged(System.Int32)"
  },
  "api/Gameplay.Conrollers.SettingsEntry.html": {
    "href": "api/Gameplay.Conrollers.SettingsEntry.html",
    "title": "Class SettingsEntry | Metro Connoisseur documentation",
    "keywords": "Class SettingsEntry Settings data model Inheritance Object SettingsEntry Implements ISaveData Namespace : Gameplay.Conrollers Assembly : cs.temp.dll.dll Syntax public class SettingsEntry : ISaveData Fields dataVersion Declaration public int dataVersion Field Value Type Description Int32 difficulty Declaration public int difficulty Field Value Type Description Int32 theme Declaration public int theme Field Value Type Description Int32 Properties Version Declaration public int Version { get; set; } Property Value Type Description Int32 Implements ISaveData"
  },
  "api/Gameplay.Conrollers.StatisticsController.html": {
    "href": "api/Gameplay.Conrollers.StatisticsController.html",
    "title": "Class StatisticsController | Metro Connoisseur documentation",
    "keywords": "Class StatisticsController Manages statistics and achievements. Also saves and loads statistics data to disk Inheritance Object SaveDataBaseController < StatisticsEntry > StatisticsController Inherited Members SaveDataBaseController<StatisticsEntry>.current SaveDataBaseController<StatisticsEntry>.Save() Namespace : Gameplay.Conrollers Assembly : cs.temp.dll.dll Syntax public class StatisticsController : SaveDataBaseController<StatisticsEntry> Fields sesion Declaration public StatisticsEntry sesion Field Value Type Description StatisticsEntry sesionUnlockedStations Declaration public List<MetroStation> sesionUnlockedStations Field Value Type Description List < MetroStation > Properties Filename Declaration public override string Filename { get; } Property Value Type Description String Overrides Gameplay.Conrollers.SaveDataBaseController<StatisticsEntry>.Filename Version Declaration public override int Version { get; } Property Value Type Description Int32 Overrides Gameplay.Conrollers.SaveDataBaseController<StatisticsEntry>.Version Methods InitializeSaveData(StatisticsEntry) Declaration public override void InitializeSaveData(StatisticsEntry data) Parameters Type Name Description StatisticsEntry data Overrides Gameplay.Conrollers.SaveDataBaseController<StatisticsEntry>.InitializeSaveData(StatisticsEntry) OnNewGame(Object[]) Declaration public void OnNewGame(object[] objects) Parameters Type Name Description Object [] objects OnSaveDataLoaded() Declaration public override void OnSaveDataLoaded() Overrides Gameplay.Conrollers.SaveDataBaseController<StatisticsEntry>.OnSaveDataLoaded() OnVersionChanged(Int32) Declaration public override void OnVersionChanged(int oldVersion) Parameters Type Name Description Int32 oldVersion Overrides Gameplay.Conrollers.SaveDataBaseController<StatisticsEntry>.OnVersionChanged(System.Int32) TryUnlockStation(MetroStation) Declaration public void TryUnlockStation(MetroStation station) Parameters Type Name Description MetroStation station"
  },
  "api/Gameplay.Controls.BackHandler.html": {
    "href": "api/Gameplay.Controls.BackHandler.html",
    "title": "Class BackHandler | Metro Connoisseur documentation",
    "keywords": "Class BackHandler Inheritance Object BackHandler Namespace : Gameplay.Controls Assembly : cs.temp.dll.dll Syntax public class BackHandler : MonoBehaviour Methods GetTop() Declaration public static BackHandler GetTop() Returns Type Description BackHandler"
  },
  "api/Gameplay.Controls.html": {
    "href": "api/Gameplay.Controls.html",
    "title": "Namespace Gameplay.Controls | Metro Connoisseur documentation",
    "keywords": "Namespace Gameplay.Controls Classes BackHandler TouchButton UI control to select objects, like metro stations and lines TouchCameraController Main player movement controller, responsible for moving around and zooming. UIDragableButton Button that can be dragged, used as part of UIDraggableButtonList UIDraggableButtonList List of buttons that allow to rearrange the data UISwipe UI control that allows to swipe an UI element up and down to open and hide it Interfaces ISelectable Defines a selectable UI element"
  },
  "api/Gameplay.Controls.ISelectable.html": {
    "href": "api/Gameplay.Controls.ISelectable.html",
    "title": "Interface ISelectable | Metro Connoisseur documentation",
    "keywords": "Interface ISelectable Defines a selectable UI element Namespace : Gameplay.Controls Assembly : cs.temp.dll.dll Syntax public interface ISelectable Methods IsFocused(MetroRenderer) Declaration bool IsFocused(MetroRenderer metroRenderer) Parameters Type Name Description MetroRenderer metroRenderer Returns Type Description Boolean SetSelected(MetroRenderer, Boolean) Declaration void SetSelected(MetroRenderer metroRenderer, bool value) Parameters Type Name Description MetroRenderer metroRenderer Boolean value ShowLabel(Boolean) Declaration void ShowLabel(bool visible) Parameters Type Name Description Boolean visible"
  },
  "api/Gameplay.Controls.TouchButton.html": {
    "href": "api/Gameplay.Controls.TouchButton.html",
    "title": "Class TouchButton | Metro Connoisseur documentation",
    "keywords": "Class TouchButton UI control to select objects, like metro stations and lines Inheritance Object TouchButton Namespace : Gameplay.Controls Assembly : cs.temp.dll.dll Syntax public class TouchButton : MonoBehaviour Fields camera Declaration public Camera camera Field Value Type Description Camera filter Declaration public Func<ISelectable, bool> filter Field Value Type Description Func < ISelectable , Boolean > isEnabled Declaration public bool isEnabled Field Value Type Description Boolean overrideFocus Declaration public bool overrideFocus Field Value Type Description Boolean Methods Disable() Declaration public void Disable() Enable(Func<ISelectable, Boolean>, Boolean, Boolean) Declaration public void Enable(Func<ISelectable, bool> filter, bool overrideFocus = false, bool showStationName = false) Parameters Type Name Description Func < ISelectable , Boolean > filter Boolean overrideFocus Boolean showStationName GetSelected<T>() Declaration public T GetSelected<T>() where T : class Returns Type Description T Type Parameters Name Description T"
  },
  "api/Gameplay.Controls.TouchCameraController.html": {
    "href": "api/Gameplay.Controls.TouchCameraController.html",
    "title": "Class TouchCameraController | Metro Connoisseur documentation",
    "keywords": "Class TouchCameraController Main player movement controller, responsible for moving around and zooming. Inheritance Object TouchCameraController Namespace : Gameplay.Controls Assembly : cs.temp.dll.dll Syntax public class TouchCameraController : MonoBehaviour Fields camera Declaration public Camera camera Field Value Type Description Camera config Declaration public PlayerConfig config Field Value Type Description PlayerConfig controlEnabled Declaration public bool controlEnabled Field Value Type Description Boolean endLerpThreshold Declaration public float endLerpThreshold Field Value Type Description Single lerpTime Declaration public float lerpTime Field Value Type Description Single worldBounds Declaration public Rect worldBounds Field Value Type Description Rect Methods LerpTo(Vector3) Declaration public void LerpTo(Vector3 position) Parameters Type Name Description Vector3 position"
  },
  "api/Gameplay.Controls.UIDragableButton.html": {
    "href": "api/Gameplay.Controls.UIDragableButton.html",
    "title": "Class UIDragableButton | Metro Connoisseur documentation",
    "keywords": "Class UIDragableButton Button that can be dragged, used as part of UIDraggableButtonList Inheritance Object UIDragableButton Implements IPointerDownHandler IPointerUpHandler Namespace : Gameplay.Controls Assembly : cs.temp.dll.dll Syntax public class UIDragableButton : MonoBehaviour Fields element Declaration public INamedArrayElement element Field Value Type Description INamedArrayElement gap Declaration public const int gap = 10 Field Value Type Description Int32 label Declaration public TMP_Text label Field Value Type Description TMP_Text lastSlot Declaration public int lastSlot Field Value Type Description Int32 returnSpeed Declaration public float returnSpeed Field Value Type Description Single Methods GetCurrentSlot() Declaration public int GetCurrentSlot() Returns Type Description Int32 OnPointerDown(PointerEventData) Declaration public void OnPointerDown(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData OnPointerUp(PointerEventData) Declaration public void OnPointerUp(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData SetColor(Color) Declaration public void SetColor(Color color) Parameters Type Name Description Color color SetData(INamedArrayElement, Int32) Declaration public void SetData(INamedArrayElement _element, int index) Parameters Type Name Description INamedArrayElement _element Int32 index Implements IPointerDownHandler IPointerUpHandler"
  },
  "api/Gameplay.Controls.UIDraggableButtonList.html": {
    "href": "api/Gameplay.Controls.UIDraggableButtonList.html",
    "title": "Class UIDraggableButtonList | Metro Connoisseur documentation",
    "keywords": "Class UIDraggableButtonList List of buttons that allow to rearrange the data Inheritance Object UIDraggableButtonList Namespace : Gameplay.Controls Assembly : cs.temp.dll.dll Syntax public class UIDraggableButtonList : MonoBehaviour Fields buttonPrefab Declaration public UIDragableButton buttonPrefab Field Value Type Description UIDragableButton buttons Declaration public List<UIDragableButton> buttons Field Value Type Description List < UIDragableButton > maxPos Declaration public float maxPos Field Value Type Description Single minPos Declaration public float minPos Field Value Type Description Single onChanged Declaration public UnityEvent onChanged Field Value Type Description UnityEvent Methods ClampPos(Single) Declaration public float ClampPos(float pos) Parameters Type Name Description Single pos Returns Type Description Single Move(Int32, Int32) Declaration public void Move(int oldIndex, int newIndex) Parameters Type Name Description Int32 oldIndex Int32 newIndex SetData(List<INamedArrayElement>) Declaration public void SetData(List<INamedArrayElement> elements) Parameters Type Name Description List < INamedArrayElement > elements"
  },
  "api/Gameplay.Controls.UISwipe.html": {
    "href": "api/Gameplay.Controls.UISwipe.html",
    "title": "Class UISwipe | Metro Connoisseur documentation",
    "keywords": "Class UISwipe UI control that allows to swipe an UI element up and down to open and hide it Inheritance Object UISwipe Namespace : Gameplay.Controls Assembly : cs.temp.dll.dll Syntax public class UISwipe : MonoBehaviour Fields closedPosition Declaration public Vector2 closedPosition Field Value Type Description Vector2 closeThreshold Declaration public Vector2 closeThreshold Field Value Type Description Vector2 content Declaration public GameObject content Field Value Type Description GameObject friction Declaration public float friction Field Value Type Description Single isReturning Declaration public bool isReturning Field Value Type Description Boolean moveAxis Declaration public Vector2 moveAxis Field Value Type Description Vector2 returnSpeed Declaration public float returnSpeed Field Value Type Description Single shouldDisableContent Declaration public bool shouldDisableContent Field Value Type Description Boolean twoWay Declaration public bool twoWay Field Value Type Description Boolean Methods ForceClosed() Declaration public void ForceClosed() ForceOpen() Declaration public void ForceOpen()"
  },
  "api/Gameplay.Core.HeapQueue-1.html": {
    "href": "api/Gameplay.Core.HeapQueue-1.html",
    "title": "Class HeapQueue<T> | Metro Connoisseur documentation",
    "keywords": "Class HeapQueue<T> HeapQueue provides a queue collection that is always ordered. Inheritance Object HeapQueue<T> Namespace : Gameplay.Core Assembly : cs.temp.dll.dll Syntax public class HeapQueue<T> where T : IComparable<T> Type Parameters Name Description T Constructors HeapQueue() Declaration public HeapQueue() Properties Count Declaration public int Count { get; } Property Value Type Description Int32 First Declaration public T First { get; } Property Value Type Description T IsEmpty Declaration public bool IsEmpty { get; } Property Value Type Description Boolean Methods Clear() Declaration public void Clear() Contains(T) Declaration public bool Contains(T item) Parameters Type Name Description T item Returns Type Description Boolean Peek() Declaration public T Peek() Returns Type Description T Pop() Declaration public T Pop() Returns Type Description T Push(T) Declaration public void Push(T item) Parameters Type Name Description T item Remove(T) Declaration public void Remove(T item) Parameters Type Name Description T item"
  },
  "api/Gameplay.Core.html": {
    "href": "api/Gameplay.Core.html",
    "title": "Namespace Gameplay.Core | Metro Connoisseur documentation",
    "keywords": "Namespace Gameplay.Core Classes HeapQueue<T> HeapQueue provides a queue collection that is always ordered. Simulation The Simulation class implements the discrete event simulator pattern. Events are pooled, with a default capacity of 4 instances. Simulation.Event An event is something that happens at a point in time in a simulation. The Precondition method is used to check if the event should be executed, as conditions may have changed in the simulation since the event was originally scheduled. Simulation.Event<T> Event adds the ability to hook into the OnExecute callback whenever the event is executed. Use this class to allow functionality to be plugged into your application with minimal or zero configuration."
  },
  "api/Gameplay.Core.Simulation.Event.html": {
    "href": "api/Gameplay.Core.Simulation.Event.html",
    "title": "Class Simulation.Event | Metro Connoisseur documentation",
    "keywords": "Class Simulation.Event An event is something that happens at a point in time in a simulation. The Precondition method is used to check if the event should be executed, as conditions may have changed in the simulation since the event was originally scheduled. Inheritance Object Simulation.Event Simulation.Event<T> Namespace : Gameplay.Core Assembly : cs.temp.dll.dll Syntax public abstract class Event : IComparable<Simulation.Event> Methods CompareTo(Simulation.Event) Declaration public int CompareTo(Simulation.Event other) Parameters Type Name Description Simulation.Event other Returns Type Description Int32 Execute() Declaration public abstract void Execute() Precondition() Declaration public virtual bool Precondition() Returns Type Description Boolean"
  },
  "api/Gameplay.Core.Simulation.Event-1.html": {
    "href": "api/Gameplay.Core.Simulation.Event-1.html",
    "title": "Class Simulation.Event<T> | Metro Connoisseur documentation",
    "keywords": "Class Simulation.Event<T> Event adds the ability to hook into the OnExecute callback whenever the event is executed. Use this class to allow functionality to be plugged into your application with minimal or zero configuration. Inheritance Object Simulation.Event Simulation.Event<T> Inherited Members Simulation.Event.CompareTo(Simulation.Event) Simulation.Event.Execute() Simulation.Event.Precondition() Namespace : Gameplay.Core Assembly : cs.temp.dll.dll Syntax public abstract class Event<T> : Simulation.Event, IComparable<Simulation.Event> where T : Simulation.Event<T> Type Parameters Name Description T Fields OnExecute Declaration public static Action<T> OnExecute Field Value Type Description Action <T>"
  },
  "api/Gameplay.Core.Simulation.html": {
    "href": "api/Gameplay.Core.Simulation.html",
    "title": "Class Simulation | Metro Connoisseur documentation",
    "keywords": "Class Simulation The Simulation class implements the discrete event simulator pattern. Events are pooled, with a default capacity of 4 instances. Inheritance Object Simulation Namespace : Gameplay.Core Assembly : cs.temp.dll.dll Syntax public static class Simulation Methods Clear() Clear all pending events and reset the tick to 0. Declaration public static void Clear() DestroyModel<T>() Destroy the simulation model instance for a class. Declaration public static void DestroyModel<T>() where T : class, new() Type Parameters Name Description T GetModel<T>() Return the simulation model instance for a class. Declaration public static T GetModel<T>() where T : class, new() Returns Type Description T Type Parameters Name Description T New<T>() Create a new event of type T and return it, but do not schedule it. Declaration public static T New<T>() where T : Simulation.Event, new() Returns Type Description T Type Parameters Name Description T Reschedule<T>(T, Single) Reschedule an existing event for a future tick, and return it. Declaration public static T Reschedule<T>(T event, float tick) where T : Simulation.Event, new() Parameters Type Name Description T event Single tick Tick. Returns Type Description T The event. Type Parameters Name Description T The event type parameter. Schedule<T>(Single) Schedule an event for a future tick, and return it. Declaration public static T Schedule<T>(float tick = 0F) where T : Simulation.Event, new() Parameters Type Name Description Single tick Tick. Returns Type Description T The event. Type Parameters Name Description T The event type parameter. SetModel<T>(T) Set a simulation model instance for a class. Declaration public static void SetModel<T>(T instance) where T : class, new() Parameters Type Name Description T instance Type Parameters Name Description T Tick() Tick the simulation. Returns the count of remaining events. If remaining events is zero, the simulation is finished unless events are injected from an external system via a Schedule() call. Declaration public static int Tick() Returns Type Description Int32"
  },
  "api/Gameplay.EventTypes.html": {
    "href": "api/Gameplay.EventTypes.html",
    "title": "Class EventTypes | Metro Connoisseur documentation",
    "keywords": "Class EventTypes Inheritance Object EventTypes Namespace : Gameplay Assembly : cs.temp.dll.dll Syntax public static class EventTypes Fields QUESTION_ANSWERED Declaration public const string QUESTION_ANSWERED = \"QUESTION_ANSWERED\" Field Value Type Description String QUESTION_P Declaration public const string QUESTION_P = \"QUESTION_\" Field Value Type Description String SESSION_ENDED Declaration public const string SESSION_ENDED = \"SESSION_ENDED\" Field Value Type Description String SESSION_P Declaration public const string SESSION_P = \"SESSION_\" Field Value Type Description String SESSION_STARTED Declaration public const string SESSION_STARTED = \"SESSION_STARTED\" Field Value Type Description String"
  },
  "api/Gameplay.GameModel.html": {
    "href": "api/Gameplay.GameModel.html",
    "title": "Class GameModel | Metro Connoisseur documentation",
    "keywords": "Class GameModel Game model contains all important game classes and stores them for easy access from anywhere Inheritance Object GameModel Namespace : Gameplay Assembly : cs.temp.dll.dll Syntax [Serializable] public class GameModel Fields achievements Declaration public UIAchievement achievements Field Value Type Description UIAchievement cameraController Declaration public TouchCameraController cameraController Field Value Type Description TouchCameraController gameModeController Declaration public GameModeController gameModeController Field Value Type Description GameModeController gameOverScreen Declaration public UIGameOverScreen gameOverScreen Field Value Type Description UIGameOverScreen input Declaration public PlayerInput input Field Value Type Description PlayerInput palette Declaration public ColorPalette palette Field Value Type Description ColorPalette renderer Declaration public MetroRenderer renderer Field Value Type Description MetroRenderer settings Declaration public SettingsController settings Field Value Type Description SettingsController statistics Declaration public StatisticsController statistics Field Value Type Description StatisticsController uiGame Declaration public UIGame uiGame Field Value Type Description UIGame"
  },
  "api/Gameplay.Health.html": {
    "href": "api/Gameplay.Health.html",
    "title": "Class Health | Metro Connoisseur documentation",
    "keywords": "Class Health Represebts the current vital statistics of some game entity. Inheritance Object Health Namespace : Gameplay Assembly : cs.temp.dll.dll Syntax public class Health : MonoBehaviour Fields healed Declaration public Health.IntEvent healed Field Value Type Description Health.IntEvent hurt Declaration public Health.IntEvent hurt Field Value Type Description Health.IntEvent hurtBy Declaration public Health.PainEvent hurtBy Field Value Type Description Health.PainEvent isZero Declaration public UnityEvent isZero Field Value Type Description UnityEvent maxHp Declaration public int maxHp Field Value Type Description Int32 regenerate Declaration public bool regenerate Field Value Type Description Boolean regenerateRate Declaration public int regenerateRate Field Value Type Description Int32 Properties IsAlive Declaration public bool IsAlive { get; } Property Value Type Description Boolean Methods Decrement(Int32, PainType) Decrement the HP of the entity. Will trigger a HealthIsZero event when current HP reaches 0. Declaration public void Decrement(int damage = 1, PainType type = PainType.Physical) Parameters Type Name Description Int32 damage PainType type Die() Decrement the HP of the entitiy until HP reaches 0. Declaration public void Die() Increment(Int32) Increment the HP of the entity. Declaration public void Increment(int heal = 1) Parameters Type Name Description Int32 heal"
  },
  "api/Gameplay.Health.IntEvent.html": {
    "href": "api/Gameplay.Health.IntEvent.html",
    "title": "Class Health.IntEvent | Metro Connoisseur documentation",
    "keywords": "Class Health.IntEvent Inheritance Object Health.IntEvent Namespace : Gameplay Assembly : cs.temp.dll.dll Syntax public class IntEvent : UnityEvent<int>"
  },
  "api/Gameplay.Health.PainEvent.html": {
    "href": "api/Gameplay.Health.PainEvent.html",
    "title": "Class Health.PainEvent | Metro Connoisseur documentation",
    "keywords": "Class Health.PainEvent Inheritance Object Health.PainEvent Namespace : Gameplay Assembly : cs.temp.dll.dll Syntax public class PainEvent : UnityEvent<PainType>"
  },
  "api/Gameplay.html": {
    "href": "api/Gameplay.html",
    "title": "Namespace Gameplay | Metro Connoisseur documentation",
    "keywords": "Namespace Gameplay Classes EventTypes GameModel Game model contains all important game classes and stores them for easy access from anywhere Health Represebts the current vital statistics of some game entity. Health.IntEvent Health.PainEvent SceneTransitionManager Enums PainType"
  },
  "api/Gameplay.MetroDisplay.ConnData.html": {
    "href": "api/Gameplay.MetroDisplay.ConnData.html",
    "title": "Struct ConnData | Metro Connoisseur documentation",
    "keywords": "Struct ConnData Temporary data struct for line displays Namespace : Gameplay.MetroDisplay Assembly : cs.temp.dll.dll Syntax public struct ConnData Constructors ConnData(Vector2, MetroConnection) Declaration public ConnData(Vector2 point, MetroConnection connection) Parameters Type Name Description Vector2 point MetroConnection connection Fields connection Declaration public MetroConnection connection Field Value Type Description MetroConnection point Declaration public Vector2 point Field Value Type Description Vector2"
  },
  "api/Gameplay.MetroDisplay.CrossingDisplay.html": {
    "href": "api/Gameplay.MetroDisplay.CrossingDisplay.html",
    "title": "Class CrossingDisplay | Metro Connoisseur documentation",
    "keywords": "Class CrossingDisplay Controls how MetroCrossing are displayed Inheritance Object CrossingDisplay Namespace : Gameplay.MetroDisplay Assembly : cs.temp.dll.dll Syntax public class CrossingDisplay : MonoBehaviour Fields crossing Declaration public MetroCrossing crossing Field Value Type Description MetroCrossing JunctionFor2 Declaration public Sprite JunctionFor2 Field Value Type Description Sprite JunctionFor3 Declaration public Sprite JunctionFor3 Field Value Type Description Sprite JunctionFor3Triangle Declaration public Sprite JunctionFor3Triangle Field Value Type Description Sprite JunctionFor4 Declaration public Sprite JunctionFor4 Field Value Type Description Sprite renderer Declaration public SpriteRenderer renderer Field Value Type Description SpriteRenderer Methods Refresh() Declaration public void Refresh() SetCrossing(Metro, MetroCrossing) Declaration public void SetCrossing(Metro metro, MetroCrossing crossing) Parameters Type Name Description Metro metro MetroCrossing crossing SetFocused(Boolean) Declaration public void SetFocused(bool value) Parameters Type Name Description Boolean value"
  },
  "api/Gameplay.MetroDisplay.FocusDisplay.html": {
    "href": "api/Gameplay.MetroDisplay.FocusDisplay.html",
    "title": "Class FocusDisplay | Metro Connoisseur documentation",
    "keywords": "Class FocusDisplay Controls how region focus UI is displayed Inheritance Object FocusDisplay Namespace : Gameplay.MetroDisplay Assembly : cs.temp.dll.dll Syntax public class FocusDisplay : MonoBehaviour Fields region Declaration public Region region Field Value Type Description Region Methods Refresh(Boolean) Declaration public void Refresh(bool refreshShape) Parameters Type Name Description Boolean refreshShape SetRegion(MetroRenderer, Region) Declaration public void SetRegion(MetroRenderer metroRenderer, Region region) Parameters Type Name Description MetroRenderer metroRenderer Region region"
  },
  "api/Gameplay.MetroDisplay.HighlightDisplay.html": {
    "href": "api/Gameplay.MetroDisplay.HighlightDisplay.html",
    "title": "Class HighlightDisplay | Metro Connoisseur documentation",
    "keywords": "Class HighlightDisplay Inheritance Object HighlightDisplay Namespace : Gameplay.MetroDisplay Assembly : cs.temp.dll.dll Syntax public class HighlightDisplay : MonoBehaviour Fields metro Declaration public Metro metro Field Value Type Description Metro quadTrans Declaration public Transform quadTrans Field Value Type Description Transform region Declaration public Region region Field Value Type Description Region renderTexture Declaration public RenderTexture renderTexture Field Value Type Description RenderTexture scale Declaration public Vector2 scale Field Value Type Description Vector2 smallBlueMat Declaration public Material smallBlueMat Field Value Type Description Material smallBlur Declaration public Texture2D smallBlur Field Value Type Description Texture2D Methods Clear() Declaration public void Clear() Refresh() Declaration public void Refresh()"
  },
  "api/Gameplay.MetroDisplay.html": {
    "href": "api/Gameplay.MetroDisplay.html",
    "title": "Namespace Gameplay.MetroDisplay | Metro Connoisseur documentation",
    "keywords": "Namespace Gameplay.MetroDisplay Classes CrossingDisplay Controls how MetroCrossing are displayed FocusDisplay Controls how region focus UI is displayed HighlightDisplay LineDisplay Controls how MetroLine are displayed LineSubDisplay A sub segment of LineDisplay , displaying a single continuous line segment MetroRenderer Controls how entire Metro is displayed StationDisplay Controls how MetroStation is displayed Structs ConnData Temporary data struct for line displays"
  },
  "api/Gameplay.MetroDisplay.LineDisplay.html": {
    "href": "api/Gameplay.MetroDisplay.LineDisplay.html",
    "title": "Class LineDisplay | Metro Connoisseur documentation",
    "keywords": "Class LineDisplay Controls how MetroLine are displayed Inheritance Object LineDisplay Namespace : Gameplay.MetroDisplay Assembly : cs.temp.dll.dll Syntax public class LineDisplay : MonoBehaviour Fields line Declaration public MetroLine line Field Value Type Description MetroLine subDisplayPrefab Declaration public LineSubDisplay subDisplayPrefab Field Value Type Description LineSubDisplay subDisplays Declaration public List<LineSubDisplay> subDisplays Field Value Type Description List < LineSubDisplay > Methods Refresh() Declaration public void Refresh() SetFocused(Boolean) Declaration public void SetFocused(bool value) Parameters Type Name Description Boolean value SetGroupData(MetroLine) Declaration public void SetGroupData(MetroLine _line) Parameters Type Name Description MetroLine _line"
  },
  "api/Gameplay.MetroDisplay.LineSubDisplay.html": {
    "href": "api/Gameplay.MetroDisplay.LineSubDisplay.html",
    "title": "Class LineSubDisplay | Metro Connoisseur documentation",
    "keywords": "Class LineSubDisplay A sub segment of LineDisplay , displaying a single continuous line segment Inheritance Object LineSubDisplay Implements ISelectable Namespace : Gameplay.MetroDisplay Assembly : cs.temp.dll.dll Syntax public class LineSubDisplay : MonoBehaviour Fields abovetrains Declaration public SpriteShape abovetrains Field Value Type Description SpriteShape endCap Declaration public Transform endCap Field Value Type Description Transform highlight Declaration public GameObject highlight Field Value Type Description GameObject highlightShape Declaration public SpriteShapeController highlightShape Field Value Type Description SpriteShapeController line Declaration public MetroLine line Field Value Type Description MetroLine renderer Declaration public SpriteShapeRenderer renderer Field Value Type Description SpriteShapeRenderer shape Declaration public SpriteShapeController shape Field Value Type Description SpriteShapeController startCap Declaration public Transform startCap Field Value Type Description Transform undergound Declaration public SpriteShape undergound Field Value Type Description SpriteShape Properties spline Declaration public Spline spline { get; } Property Value Type Description Spline Methods IsFocused(MetroRenderer) Declaration public bool IsFocused(MetroRenderer metroRenderer) Parameters Type Name Description MetroRenderer metroRenderer Returns Type Description Boolean Refresh() Declaration public void Refresh() SetFocused(Boolean) Declaration public void SetFocused(bool value) Parameters Type Name Description Boolean value SetGroupData(List<ConnData>, MetroLine) Declaration public void SetGroupData(List<ConnData> _points, MetroLine _line) Parameters Type Name Description List < ConnData > _points MetroLine _line SetSelected(MetroRenderer, Boolean) Declaration public void SetSelected(MetroRenderer metroRenderer, bool value) Parameters Type Name Description MetroRenderer metroRenderer Boolean value ShowLabel(Boolean) Declaration public void ShowLabel(bool visible) Parameters Type Name Description Boolean visible Implements ISelectable"
  },
  "api/Gameplay.MetroDisplay.MetroRenderer.html": {
    "href": "api/Gameplay.MetroDisplay.MetroRenderer.html",
    "title": "Class MetroRenderer | Metro Connoisseur documentation",
    "keywords": "Class MetroRenderer Controls how entire Metro is displayed Inheritance Object MetroRenderer Namespace : Gameplay.MetroDisplay Assembly : cs.temp.dll.dll Syntax public class MetroRenderer : MonoBehaviour Fields expectedLabelState Declaration public bool expectedLabelState Field Value Type Description Boolean focusRegion Declaration public Region focusRegion Field Value Type Description Region metro Declaration public Metro metro Field Value Type Description Metro Properties stationSelect Declaration public GameObject stationSelect { get; } Property Value Type Description GameObject Methods ClearAll() Destroy all display objects Declaration public void ClearAll() ClearFocus() Clear focus and display everything Declaration public void ClearFocus() FocusRegion(Region) Focus a region, other places will be overlayed with white mask, and names will be hidden Declaration public void FocusRegion(Region region) Parameters Type Name Description Region region Target region GetStationDisplay(MetroStation) Get Display for a station Declaration public StationDisplay GetStationDisplay(MetroStation station) Parameters Type Name Description MetroStation station Returns Type Description StationDisplay Corresponding display HideAllLabels() Stop displaying all station labels Declaration public void HideAllLabels() Refresh() Refresh renderer state without allocation Declaration public void Refresh() Regenerate() Recreate all display meshes and objects Declaration public void Regenerate() ShowAllLabels() Show all station labels Declaration public void ShowAllLabels()"
  },
  "api/Gameplay.MetroDisplay.Model.Area.html": {
    "href": "api/Gameplay.MetroDisplay.Model.Area.html",
    "title": "Class Area | Metro Connoisseur documentation",
    "keywords": "Class Area Defines a area of the metro. Inheritance Object Area Namespace : Gameplay.MetroDisplay.Model Assembly : cs.temp.dll.dll Syntax public class Area Constructors Area(List<Vector2>) Declaration public Area(List<Vector2> points) Parameters Type Name Description List < Vector2 > points Area(Boolean) Declaration public Area(bool everywhere) Parameters Type Name Description Boolean everywhere Fields everywhere Declaration public bool everywhere Field Value Type Description Boolean Everywhere Declaration public static readonly Area Everywhere Field Value Type Description Area points Set of points that define this area polygon Declaration public List<Vector2> points Field Value Type Description List < Vector2 > Methods SetFromSpline(SpriteShapeController) Declaration public void SetFromSpline(SpriteShapeController shapeController) Parameters Type Name Description SpriteShapeController shapeController"
  },
  "api/Gameplay.MetroDisplay.Model.EnumHelper.html": {
    "href": "api/Gameplay.MetroDisplay.Model.EnumHelper.html",
    "title": "Class EnumHelper | Metro Connoisseur documentation",
    "keywords": "Class EnumHelper Inheritance Object EnumHelper Namespace : Gameplay.MetroDisplay.Model Assembly : cs.temp.dll.dll Syntax public static class EnumHelper Methods GetDirection(NamePosition) Declaration public static Vector2 GetDirection(this NamePosition position) Parameters Type Name Description NamePosition position Returns Type Description Vector2 GetOffset(NamePosition) Declaration public static Vector2 GetOffset(this NamePosition position) Parameters Type Name Description NamePosition position Returns Type Description Vector2"
  },
  "api/Gameplay.MetroDisplay.Model.GlobalId.html": {
    "href": "api/Gameplay.MetroDisplay.Model.GlobalId.html",
    "title": "Class GlobalId | Metro Connoisseur documentation",
    "keywords": "Class GlobalId Class that combines line and station id's Inheritance Object GlobalId Implements IComparable < GlobalId > Namespace : Gameplay.MetroDisplay.Model Assembly : cs.temp.dll.dll Syntax public class GlobalId : IEquatable<GlobalId> Constructors GlobalId(Int32, Int32) Declaration public GlobalId(int lineId, int stationId) Parameters Type Name Description Int32 lineId Int32 stationId Fields lineId Declaration public byte lineId Field Value Type Description Byte stationId Declaration public byte stationId Field Value Type Description Byte Methods CompareTo(GlobalId) Declaration public int CompareTo(GlobalId other) Parameters Type Name Description GlobalId other Returns Type Description Int32 Equals(GlobalId) Declaration public bool Equals(GlobalId other) Parameters Type Name Description GlobalId other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Operators Equality(GlobalId, GlobalId) Declaration public static bool operator ==(GlobalId lhs, GlobalId rhs) Parameters Type Name Description GlobalId lhs GlobalId rhs Returns Type Description Boolean Implicit(GlobalId to Int32) Declaration public static implicit operator int (GlobalId id) Parameters Type Name Description GlobalId id Returns Type Description Int32 Implicit(Int32 to GlobalId) Declaration public static implicit operator GlobalId(int number) Parameters Type Name Description Int32 number Returns Type Description GlobalId Inequality(GlobalId, GlobalId) Declaration public static bool operator !=(GlobalId lhs, GlobalId rhs) Parameters Type Name Description GlobalId lhs GlobalId rhs Returns Type Description Boolean Implements IComparable<>"
  },
  "api/Gameplay.MetroDisplay.Model.html": {
    "href": "api/Gameplay.MetroDisplay.Model.html",
    "title": "Namespace Gameplay.MetroDisplay.Model | Metro Connoisseur documentation",
    "keywords": "Namespace Gameplay.MetroDisplay.Model Classes Area Defines a area of the metro. EnumHelper GlobalId Class that combines line and station id's Metro Main metro data class, contains all information about the metro MetroConnection Defines a connection between two stations. Also defines some display parameters MetroCrossing Defines a crossing between lines MetroLine Defines a line in the metro, contains MetroStation and MetroConnection Also has some display parameters MetroStation Defines a station in the metro Also has some display parameters Region Defines a region of a metro, which can be a line, an area or the whole metro Enums LineStyle NamePosition Text alignment options RegionType"
  },
  "api/Gameplay.MetroDisplay.Model.LineStyle.html": {
    "href": "api/Gameplay.MetroDisplay.Model.LineStyle.html",
    "title": "Enum LineStyle | Metro Connoisseur documentation",
    "keywords": "Enum LineStyle Namespace : Gameplay.MetroDisplay.Model Assembly : cs.temp.dll.dll Syntax public enum LineStyle Fields Name Description GROUND UNDERGROUND"
  },
  "api/Gameplay.MetroDisplay.Model.Metro.html": {
    "href": "api/Gameplay.MetroDisplay.Model.Metro.html",
    "title": "Class Metro | Metro Connoisseur documentation",
    "keywords": "Class Metro Main metro data class, contains all information about the metro Inheritance Object Metro Namespace : Gameplay.MetroDisplay.Model Assembly : cs.temp.dll.dll Syntax public class Metro : ScriptableObject Fields crossings Declaration public List<MetroCrossing> crossings Field Value Type Description List < MetroCrossing > lines Declaration public List<MetroLine> lines Field Value Type Description List < MetroLine > regions Declaration public List<Region> regions Field Value Type Description List < Region > Methods GetStation(GlobalId) Get stations for line and station id Declaration public MetroStation GetStation(GlobalId globalId) Parameters Type Name Description GlobalId globalId Returns Type Description MetroStation GetStation(Int32, Int32) Get stations for line and station id Declaration public MetroStation GetStation(int lineId, int stationId) Parameters Type Name Description Int32 lineId Int32 stationId Returns Type Description MetroStation GetStationsByName(String) Get all stations with a name Declaration public List<MetroStation> GetStationsByName(string name) Parameters Type Name Description String name Needed name Returns Type Description List < MetroStation > All matching stations IsStationAdjacent(MetroStation, HashSet<Int32>, Boolean) Declaration public bool IsStationAdjacent(MetroStation station, HashSet<int> unlockedStations, bool checkAdjecent = true) Parameters Type Name Description MetroStation station HashSet < Int32 > unlockedStations Boolean checkAdjecent Returns Type Description Boolean PickRandomLine(Region) Pick random line within region Declaration public MetroLine PickRandomLine(Region region) Parameters Type Name Description Region region Returns Type Description MetroLine PickRandomStation(Region) Pick a random station within the region Declaration public MetroStation PickRandomStation(Region region) Parameters Type Name Description Region region Returns Type Description MetroStation PickRandomStation(Region, List<Int32>) Pick a random station within the region Exclude all stations that are in the blacklist Declaration public MetroStation PickRandomStation(Region region, List<int> blacklist) Parameters Type Name Description Region region List < Int32 > blacklist List of global station id's to ignore Returns Type Description MetroStation PickRandomStationRange(Region, Int32, List<Int32>) Pick a line of stations in a random place within region Exclude all stations that are in the blacklist Declaration public List<MetroStation> PickRandomStationRange(Region region, int size, List<int> blacklist) Parameters Type Name Description Region region Int32 size How many stations range has to have List < Int32 > blacklist List of global station id's to ignore Returns Type Description List < MetroStation > PickStationNear(MetroStation) Pick a stations that is near another station Declaration public MetroStation PickStationNear(MetroStation station) Parameters Type Name Description MetroStation station Returns Type Description MetroStation"
  },
  "api/Gameplay.MetroDisplay.Model.MetroConnection.html": {
    "href": "api/Gameplay.MetroDisplay.Model.MetroConnection.html",
    "title": "Class MetroConnection | Metro Connoisseur documentation",
    "keywords": "Class MetroConnection Defines a connection between two stations. Also defines some display parameters Inheritance Object MetroConnection Namespace : Gameplay.MetroDisplay.Model Assembly : cs.temp.dll.dll Syntax public class MetroConnection : INamedArrayElement Fields bendPoint Declaration public Vector2 bendPoint Field Value Type Description Vector2 endStationId Declaration public byte endStationId Field Value Type Description Byte isOpen Declaration public bool isOpen Field Value Type Description Boolean lineId Declaration public byte lineId Field Value Type Description Byte overrideBend Declaration public bool overrideBend Field Value Type Description Boolean startStationId Declaration public byte startStationId Field Value Type Description Byte weight Declaration public float weight Field Value Type Description Single Properties displayName Declaration public string displayName { get; } Property Value Type Description String editorName Declaration public string editorName { get; } Property Value Type Description String Methods ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api/Gameplay.MetroDisplay.Model.MetroCrossing.html": {
    "href": "api/Gameplay.MetroDisplay.Model.MetroCrossing.html",
    "title": "Class MetroCrossing | Metro Connoisseur documentation",
    "keywords": "Class MetroCrossing Defines a crossing between lines Inheritance Object MetroCrossing Namespace : Gameplay.MetroDisplay.Model Assembly : cs.temp.dll.dll Syntax public class MetroCrossing Fields isOpen Declaration public bool isOpen Field Value Type Description Boolean stationsGlobalIds Declaration public List<GlobalId> stationsGlobalIds Field Value Type Description List < GlobalId >"
  },
  "api/Gameplay.MetroDisplay.Model.MetroLine.html": {
    "href": "api/Gameplay.MetroDisplay.Model.MetroLine.html",
    "title": "Class MetroLine | Metro Connoisseur documentation",
    "keywords": "Class MetroLine Defines a line in the metro, contains MetroStation and MetroConnection Also has some display parameters Inheritance Object MetroLine Implements IIndexable < Int32 > Namespace : Gameplay.MetroDisplay.Model Assembly : cs.temp.dll.dll Syntax public class MetroLine : INamedArrayElement Fields connections Declaration public List<MetroConnection> connections Field Value Type Description List < MetroConnection > curveCenter Declaration public Vector2 curveCenter Field Value Type Description Vector2 hideName Declaration public bool hideName Field Value Type Description Boolean isLooped Declaration public bool isLooped Field Value Type Description Boolean lineColor Declaration public Color lineColor Field Value Type Description Color lineId Declaration public byte lineId Field Value Type Description Byte name Declaration public string name Field Value Type Description String nameAlignment Declaration public TextAlignmentOptions nameAlignment Field Value Type Description TextAlignmentOptions namePosition Declaration public NamePosition namePosition Field Value Type Description NamePosition simpleLine Declaration public bool simpleLine Field Value Type Description Boolean stations Declaration public List<MetroStation> stations Field Value Type Description List < MetroStation > style Declaration public LineStyle style Field Value Type Description LineStyle useSmoothCurves Declaration public bool useSmoothCurves Field Value Type Description Boolean Properties displayName Declaration public string displayName { get; } Property Value Type Description String editorName Declaration public string editorName { get; } Property Value Type Description String index Declaration public int index { get; } Property Value Type Description Int32 Implements IIndexable<>"
  },
  "api/Gameplay.MetroDisplay.Model.MetroStation.html": {
    "href": "api/Gameplay.MetroDisplay.Model.MetroStation.html",
    "title": "Class MetroStation | Metro Connoisseur documentation",
    "keywords": "Class MetroStation Defines a station in the metro Also has some display parameters Inheritance Object MetroStation Implements IIndexable < Int32 > Namespace : Gameplay.MetroDisplay.Model Assembly : cs.temp.dll.dll Syntax public class MetroStation : INamedArrayElement Fields currentNameIndex Declaration public int currentNameIndex Field Value Type Description Int32 hideName Declaration public bool hideName Field Value Type Description Boolean isOpen Declaration public bool isOpen Field Value Type Description Boolean lineId Declaration public byte lineId Field Value Type Description Byte m_override Declaration public bool m_override Field Value Type Description Boolean nameAlignment Declaration public TextAlignmentOptions nameAlignment Field Value Type Description TextAlignmentOptions namePosition Declaration public NamePosition namePosition Field Value Type Description NamePosition names Declaration public string[] names Field Value Type Description String [] position Declaration public Vector2 position Field Value Type Description Vector2 regionType Declaration public RegionType regionType Field Value Type Description RegionType stationId Declaration public byte stationId Field Value Type Description Byte Properties currentName Declaration public string currentName { get; } Property Value Type Description String displayName Declaration public string displayName { get; } Property Value Type Description String editorName Declaration public string editorName { get; } Property Value Type Description String globalId Declaration public GlobalId globalId { get; } Property Value Type Description GlobalId index Declaration public int index { get; } Property Value Type Description Int32 Implements IIndexable<>"
  },
  "api/Gameplay.MetroDisplay.Model.NamePosition.html": {
    "href": "api/Gameplay.MetroDisplay.Model.NamePosition.html",
    "title": "Enum NamePosition | Metro Connoisseur documentation",
    "keywords": "Enum NamePosition Text alignment options Namespace : Gameplay.MetroDisplay.Model Assembly : cs.temp.dll.dll Syntax public enum NamePosition Fields Name Description BOTTOM_CENTER BOTTOM_LEFT BOTTOM_RIGHT CENTER_LEFT CENTER_RIGHT DEFAULT TOP_CENTER TOP_LEFT TOP_RIGHT"
  },
  "api/Gameplay.MetroDisplay.Model.Region.html": {
    "href": "api/Gameplay.MetroDisplay.Model.Region.html",
    "title": "Class Region | Metro Connoisseur documentation",
    "keywords": "Class Region Defines a region of a metro, which can be a line, an area or the whole metro Inheritance Object Region Namespace : Gameplay.MetroDisplay.Model Assembly : cs.temp.dll.dll Syntax public class Region Constructors Region(RegionType, HashSet<Int32>, Int32) Declaration public Region(RegionType type, HashSet<int> stations, int lineId) Parameters Type Name Description RegionType type HashSet < Int32 > stations Int32 lineId Region(RegionType, Int32) Declaration public Region(RegionType type, int lineId) Parameters Type Name Description RegionType type Int32 lineId Fields lineId Declaration public int lineId Field Value Type Description Int32 regionType Declaration public RegionType regionType Field Value Type Description RegionType stations Declaration public HashSet<int> stations Field Value Type Description HashSet < Int32 > Properties everywhere Declaration public static Region everywhere { get; } Property Value Type Description Region Methods Contains(MetroStation) Declaration public bool Contains(MetroStation station) Parameters Type Name Description MetroStation station Returns Type Description Boolean Equals(Region) Declaration protected bool Equals(Region other) Parameters Type Name Description Region other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) GetFileName(RegionType) Declaration public static string GetFileName(RegionType regionType) Parameters Type Name Description RegionType regionType Returns Type Description String GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() GetName(Metro) Declaration public string GetName(Metro metro) Parameters Type Name Description Metro metro Returns Type Description String GetRegionCenter(Metro) Declaration public Vector2 GetRegionCenter(Metro metro) Parameters Type Name Description Metro metro Returns Type Description Vector2"
  },
  "api/Gameplay.MetroDisplay.Model.RegionType.html": {
    "href": "api/Gameplay.MetroDisplay.Model.RegionType.html",
    "title": "Enum RegionType | Metro Connoisseur documentation",
    "keywords": "Enum RegionType Namespace : Gameplay.MetroDisplay.Model Assembly : cs.temp.dll.dll Syntax public enum RegionType Fields Name Description CENTER EAST GLOBAL_LINE GLOBAL_STATIONS MAX_VALUE NORTH NORTH_EAST NORTH_WEST SOUTH SOUTH_EAST SOUTH_WEST WEST"
  },
  "api/Gameplay.MetroDisplay.StationDisplay.html": {
    "href": "api/Gameplay.MetroDisplay.StationDisplay.html",
    "title": "Class StationDisplay | Metro Connoisseur documentation",
    "keywords": "Class StationDisplay Controls how MetroStation is displayed Inheritance Object StationDisplay Implements ISelectable Namespace : Gameplay.MetroDisplay Assembly : cs.temp.dll.dll Syntax public class StationDisplay : MonoBehaviour Fields label Declaration public TMP_Text label Field Value Type Description TMP_Text shouldLabelDisplay Declaration public bool shouldLabelDisplay Field Value Type Description Boolean spriteRenderer Declaration public SpriteRenderer spriteRenderer Field Value Type Description SpriteRenderer station Declaration public MetroStation station Field Value Type Description MetroStation timeToHideLabel Declaration public int timeToHideLabel Field Value Type Description Int32 Methods IsFocused(MetroRenderer) Declaration public bool IsFocused(MetroRenderer metroRenderer) Parameters Type Name Description MetroRenderer metroRenderer Returns Type Description Boolean Refresh() Declaration public void Refresh() SetFocused(Boolean) Declaration public void SetFocused(bool value) Parameters Type Name Description Boolean value SetInitialVisible(Boolean) Declaration public void SetInitialVisible(bool value) Parameters Type Name Description Boolean value SetLabelVisible(Boolean, Color) Declaration public void SetLabelVisible(bool isVisible, Color color) Parameters Type Name Description Boolean isVisible Color color SetSelected(MetroRenderer, Boolean) Declaration public void SetSelected(MetroRenderer metroRenderer, bool value) Parameters Type Name Description MetroRenderer metroRenderer Boolean value SetStation(MetroStation, MetroLine) Declaration public void SetStation(MetroStation station, MetroLine line) Parameters Type Name Description MetroStation station MetroLine line ShowLabel(Boolean) Declaration public void ShowLabel(bool visible) Parameters Type Name Description Boolean visible ShowLabelFor(Color, Int32) Declaration public void ShowLabelFor(Color color, int time) Parameters Type Name Description Color color Int32 time Implements ISelectable"
  },
  "api/Gameplay.PainType.html": {
    "href": "api/Gameplay.PainType.html",
    "title": "Enum PainType | Metro Connoisseur documentation",
    "keywords": "Enum PainType Namespace : Gameplay Assembly : cs.temp.dll.dll Syntax public enum PainType Fields Name Description Mental Physical"
  },
  "api/Gameplay.Questions.BaseQuestionGenerator.html": {
    "href": "api/Gameplay.Questions.BaseQuestionGenerator.html",
    "title": "Class BaseQuestionGenerator | Metro Connoisseur documentation",
    "keywords": "Class BaseQuestionGenerator Base class for all question generators Inheritance Object BaseQuestionGenerator QuestionGenerator<T> Namespace : Gameplay.Questions Assembly : cs.temp.dll.dll Syntax public abstract class BaseQuestionGenerator Fields metro Declaration public Metro metro Field Value Type Description Metro renderer Declaration public MetroRenderer renderer Field Value Type Description MetroRenderer Properties questionId Declaration public abstract string questionId { get; } Property Value Type Description String Methods GenerateNew() Declaration public abstract void GenerateNew() GenerateTip(Int32) Declaration public abstract string GenerateTip(int tipNumber) Parameters Type Name Description Int32 tipNumber Returns Type Description String Init(MetroRenderer, BaseUIQuestion) Declaration public virtual void Init(MetroRenderer _renderer, BaseUIQuestion root) Parameters Type Name Description MetroRenderer _renderer BaseUIQuestion root SetRegion(Region) Declaration public abstract void SetRegion(Region region) Parameters Type Name Description Region region ShouldUse(Game, Int32) Declaration public virtual bool ShouldUse(Game game, int questionNumber) Parameters Type Name Description Game game Int32 questionNumber Returns Type Description Boolean ValidateAnswer() Declaration public abstract bool ValidateAnswer() Returns Type Description Boolean"
  },
  "api/Gameplay.Questions.BaseUIQuestion.html": {
    "href": "api/Gameplay.Questions.BaseUIQuestion.html",
    "title": "Class BaseUIQuestion | Metro Connoisseur documentation",
    "keywords": "Class BaseUIQuestion Base class for all question UI classes Inheritance Object BaseUIQuestion UIQuestionFindLine UIQuestionFindStation UIQuestionOrderStations Namespace : Gameplay.Questions Assembly : cs.temp.dll.dll Syntax public abstract class BaseUIQuestion : MonoBehaviour Fields bottomPane Declaration public RectTransform bottomPane Field Value Type Description RectTransform questionLabel Declaration public TMP_Text questionLabel Field Value Type Description TMP_Text renderer Declaration public MetroRenderer renderer Field Value Type Description MetroRenderer Methods GetController() Declaration public abstract BaseQuestionGenerator GetController() Returns Type Description BaseQuestionGenerator HideElements() Declaration public virtual void HideElements()"
  },
  "api/Gameplay.Questions.Generators.FindLineGenerator.html": {
    "href": "api/Gameplay.Questions.Generators.FindLineGenerator.html",
    "title": "Class FindLineGenerator | Metro Connoisseur documentation",
    "keywords": "Class FindLineGenerator This generator generates questions like: Where is that line on the map Inheritance Object BaseQuestionGenerator QuestionGenerator < UIQuestionFindLine > FindLineGenerator Inherited Members QuestionGenerator<UIQuestionFindLine>.currentRegion QuestionGenerator<UIQuestionFindLine>.blacklistedIds QuestionGenerator<UIQuestionFindLine>.uiController QuestionGenerator<UIQuestionFindLine>.Init(MetroRenderer, BaseUIQuestion) QuestionGenerator<UIQuestionFindLine>.SetRegion(Region) BaseQuestionGenerator.renderer BaseQuestionGenerator.metro Namespace : Gameplay.Questions.Generators Assembly : cs.temp.dll.dll Syntax public class FindLineGenerator : QuestionGenerator<UIQuestionFindLine> Fields currentQuestion Declaration public MetroLine currentQuestion Field Value Type Description MetroLine QUESTION_ID Declaration public const string QUESTION_ID = \"find-line\" Field Value Type Description String questionStation Declaration public MetroStation questionStation Field Value Type Description MetroStation questionUsedLineName Declaration public bool questionUsedLineName Field Value Type Description Boolean Properties questionId Declaration public override string questionId { get; } Property Value Type Description String Overrides BaseQuestionGenerator.questionId Methods GenerateNew() Declaration public override void GenerateNew() Overrides BaseQuestionGenerator.GenerateNew() GenerateTip(Int32) Declaration public override string GenerateTip(int tipNumber) Parameters Type Name Description Int32 tipNumber Returns Type Description String Overrides BaseQuestionGenerator.GenerateTip(Int32) ShouldUse(Game, Int32) Declaration public override bool ShouldUse(Game game, int questionNumber) Parameters Type Name Description Game game Int32 questionNumber Returns Type Description Boolean Overrides BaseQuestionGenerator.ShouldUse(Game, Int32) ValidateAnswer() Declaration public override bool ValidateAnswer() Returns Type Description Boolean Overrides BaseQuestionGenerator.ValidateAnswer()"
  },
  "api/Gameplay.Questions.Generators.FindStationGenerator.html": {
    "href": "api/Gameplay.Questions.Generators.FindStationGenerator.html",
    "title": "Class FindStationGenerator | Metro Connoisseur documentation",
    "keywords": "Class FindStationGenerator This generator generates questions like: Where is that station on the map Inheritance Object BaseQuestionGenerator QuestionGenerator < UIQuestionFindStation > FindStationGenerator Inherited Members QuestionGenerator<UIQuestionFindStation>.currentRegion QuestionGenerator<UIQuestionFindStation>.blacklistedIds QuestionGenerator<UIQuestionFindStation>.uiController QuestionGenerator<UIQuestionFindStation>.Init(MetroRenderer, BaseUIQuestion) QuestionGenerator<UIQuestionFindStation>.SetRegion(Region) BaseQuestionGenerator.renderer BaseQuestionGenerator.metro BaseQuestionGenerator.ShouldUse(Game, Int32) Namespace : Gameplay.Questions.Generators Assembly : cs.temp.dll.dll Syntax public class FindStationGenerator : QuestionGenerator<UIQuestionFindStation> Fields currentQuestion Declaration public MetroStation currentQuestion Field Value Type Description MetroStation QUESTION_ID Declaration public const string QUESTION_ID = \"find-station\" Field Value Type Description String Properties questionId Declaration public override string questionId { get; } Property Value Type Description String Overrides BaseQuestionGenerator.questionId Methods GenerateNew() Declaration public override void GenerateNew() Overrides BaseQuestionGenerator.GenerateNew() GenerateTip(Int32) Declaration public override string GenerateTip(int tipNumber) Parameters Type Name Description Int32 tipNumber Returns Type Description String Overrides BaseQuestionGenerator.GenerateTip(Int32) ValidateAnswer() Declaration public override bool ValidateAnswer() Returns Type Description Boolean Overrides BaseQuestionGenerator.ValidateAnswer()"
  },
  "api/Gameplay.Questions.Generators.html": {
    "href": "api/Gameplay.Questions.Generators.html",
    "title": "Namespace Gameplay.Questions.Generators | Metro Connoisseur documentation",
    "keywords": "Namespace Gameplay.Questions.Generators Classes FindLineGenerator This generator generates questions like: Where is that line on the map FindStationGenerator This generator generates questions like: Where is that station on the map OrderStationsGenerator This generator generates questions like: Order these stations on the map UIQuestionFindLine UI for FindLineGenerator UIQuestionFindStation UI for FindStationGenerator UIQuestionOrderStations UI for OrderStationsGenerator"
  },
  "api/Gameplay.Questions.Generators.OrderStationsGenerator.html": {
    "href": "api/Gameplay.Questions.Generators.OrderStationsGenerator.html",
    "title": "Class OrderStationsGenerator | Metro Connoisseur documentation",
    "keywords": "Class OrderStationsGenerator This generator generates questions like: Order these stations on the map Inheritance Object BaseQuestionGenerator QuestionGenerator < UIQuestionOrderStations > OrderStationsGenerator Inherited Members QuestionGenerator<UIQuestionOrderStations>.currentRegion QuestionGenerator<UIQuestionOrderStations>.blacklistedIds QuestionGenerator<UIQuestionOrderStations>.uiController QuestionGenerator<UIQuestionOrderStations>.Init(MetroRenderer, BaseUIQuestion) QuestionGenerator<UIQuestionOrderStations>.SetRegion(Region) BaseQuestionGenerator.renderer BaseQuestionGenerator.metro BaseQuestionGenerator.ShouldUse(Game, Int32) Namespace : Gameplay.Questions.Generators Assembly : cs.temp.dll.dll Syntax public class OrderStationsGenerator : QuestionGenerator<UIQuestionOrderStations> Fields currentCount Declaration public int currentCount Field Value Type Description Int32 currentQuestionStations Declaration public List<MetroStation> currentQuestionStations Field Value Type Description List < MetroStation > QUESTION_ID Declaration public const string QUESTION_ID = \"station-order\" Field Value Type Description String tipBlacklisted Declaration public List<int> tipBlacklisted Field Value Type Description List < Int32 > Properties questionId Declaration public override string questionId { get; } Property Value Type Description String Overrides BaseQuestionGenerator.questionId Methods GenerateNew() Declaration public override void GenerateNew() Overrides BaseQuestionGenerator.GenerateNew() GenerateTip(Int32) Declaration public override string GenerateTip(int tipNumber) Parameters Type Name Description Int32 tipNumber Returns Type Description String Overrides BaseQuestionGenerator.GenerateTip(Int32) ValidateAnswer() Declaration public override bool ValidateAnswer() Returns Type Description Boolean Overrides BaseQuestionGenerator.ValidateAnswer()"
  },
  "api/Gameplay.Questions.Generators.UIQuestionFindLine.html": {
    "href": "api/Gameplay.Questions.Generators.UIQuestionFindLine.html",
    "title": "Class UIQuestionFindLine | Metro Connoisseur documentation",
    "keywords": "Class UIQuestionFindLine UI for FindLineGenerator Inheritance Object BaseUIQuestion UIQuestionFindLine Inherited Members BaseUIQuestion.renderer BaseUIQuestion.bottomPane BaseUIQuestion.questionLabel BaseUIQuestion.HideElements() Namespace : Gameplay.Questions.Generators Assembly : cs.temp.dll.dll Syntax public class UIQuestionFindLine : BaseUIQuestion Fields button Declaration public TouchButton button Field Value Type Description TouchButton Methods CurrentSelection() Declaration public MetroLine CurrentSelection() Returns Type Description MetroLine DisplayResult(Boolean) Declaration public void DisplayResult(bool result) Parameters Type Name Description Boolean result GetController() Declaration public override BaseQuestionGenerator GetController() Returns Type Description BaseQuestionGenerator Overrides BaseUIQuestion.GetController() SetQuestion(MetroLine) Declaration public void SetQuestion(MetroLine line) Parameters Type Name Description MetroLine line SetQuestion(MetroStation) Declaration public void SetQuestion(MetroStation station) Parameters Type Name Description MetroStation station"
  },
  "api/Gameplay.Questions.Generators.UIQuestionFindStation.html": {
    "href": "api/Gameplay.Questions.Generators.UIQuestionFindStation.html",
    "title": "Class UIQuestionFindStation | Metro Connoisseur documentation",
    "keywords": "Class UIQuestionFindStation UI for FindStationGenerator Inheritance Object BaseUIQuestion UIQuestionFindStation Inherited Members BaseUIQuestion.renderer BaseUIQuestion.bottomPane BaseUIQuestion.questionLabel BaseUIQuestion.HideElements() Namespace : Gameplay.Questions.Generators Assembly : cs.temp.dll.dll Syntax public class UIQuestionFindStation : BaseUIQuestion Fields button Declaration public TouchButton button Field Value Type Description TouchButton Methods CurrentSelection() Declaration public MetroStation CurrentSelection() Returns Type Description MetroStation DisplayResult(Boolean) Declaration public void DisplayResult(bool result) Parameters Type Name Description Boolean result GetController() Declaration public override BaseQuestionGenerator GetController() Returns Type Description BaseQuestionGenerator Overrides BaseUIQuestion.GetController() SetQuestion(MetroStation) Declaration public void SetQuestion(MetroStation station) Parameters Type Name Description MetroStation station"
  },
  "api/Gameplay.Questions.Generators.UIQuestionOrderStations.html": {
    "href": "api/Gameplay.Questions.Generators.UIQuestionOrderStations.html",
    "title": "Class UIQuestionOrderStations | Metro Connoisseur documentation",
    "keywords": "Class UIQuestionOrderStations UI for OrderStationsGenerator Inheritance Object BaseUIQuestion UIQuestionOrderStations Inherited Members BaseUIQuestion.renderer BaseUIQuestion.bottomPane BaseUIQuestion.questionLabel Namespace : Gameplay.Questions.Generators Assembly : cs.temp.dll.dll Syntax public class UIQuestionOrderStations : BaseUIQuestion Fields buttons Declaration public UIDraggableButtonList buttons Field Value Type Description UIDraggableButtonList tmpLabelTransform Declaration public Transform tmpLabelTransform Field Value Type Description Transform Methods CurrentSelection() Declaration public List<MetroStation> CurrentSelection() Returns Type Description List < MetroStation > DisplayResult(List<Boolean>, Boolean) Declaration public void DisplayResult(List<bool> result, bool allCorrect) Parameters Type Name Description List < Boolean > result Boolean allCorrect GetController() Declaration public override BaseQuestionGenerator GetController() Returns Type Description BaseQuestionGenerator Overrides BaseUIQuestion.GetController() HideElements() Declaration public override void HideElements() Overrides BaseUIQuestion.HideElements() OnOrderChanged() Declaration public void OnOrderChanged() SetQuestion(List<MetroStation>) Declaration public void SetQuestion(List<MetroStation> stations) Parameters Type Name Description List < MetroStation > stations"
  },
  "api/Gameplay.Questions.html": {
    "href": "api/Gameplay.Questions.html",
    "title": "Namespace Gameplay.Questions | Metro Connoisseur documentation",
    "keywords": "Namespace Gameplay.Questions Classes BaseQuestionGenerator Base class for all question generators BaseUIQuestion Base class for all question UI classes QuestionGenerator<T> Base class for question generators that are focused on a region of the metro UIQuestion UITipContainer UI element to represent a tip UITipController Controller for question tips Interfaces ILineQuestion Declares that this question generator is focused on lines"
  },
  "api/Gameplay.Questions.ILineQuestion.html": {
    "href": "api/Gameplay.Questions.ILineQuestion.html",
    "title": "Interface ILineQuestion | Metro Connoisseur documentation",
    "keywords": "Interface ILineQuestion Declares that this question generator is focused on lines Namespace : Gameplay.Questions Assembly : cs.temp.dll.dll Syntax public interface ILineQuestion"
  },
  "api/Gameplay.Questions.QuestionGenerator-1.html": {
    "href": "api/Gameplay.Questions.QuestionGenerator-1.html",
    "title": "Class QuestionGenerator<T> | Metro Connoisseur documentation",
    "keywords": "Class QuestionGenerator<T> Base class for question generators that are focused on a region of the metro Inheritance Object BaseQuestionGenerator QuestionGenerator<T> FindLineGenerator FindStationGenerator OrderStationsGenerator Inherited Members BaseQuestionGenerator.renderer BaseQuestionGenerator.metro BaseQuestionGenerator.questionId BaseQuestionGenerator.GenerateNew() BaseQuestionGenerator.GenerateTip(Int32) BaseQuestionGenerator.ValidateAnswer() BaseQuestionGenerator.ShouldUse(Game, Int32) Namespace : Gameplay.Questions Assembly : cs.temp.dll.dll Syntax public abstract class QuestionGenerator<T> : BaseQuestionGenerator where T : BaseUIQuestion Type Parameters Name Description T Fields blacklistedIds Declaration protected List<int> blacklistedIds Field Value Type Description List < Int32 > currentRegion Declaration public Region currentRegion Field Value Type Description Region uiController Declaration public T uiController Field Value Type Description T Methods Init(MetroRenderer, BaseUIQuestion) Declaration public override void Init(MetroRenderer _renderer, BaseUIQuestion root) Parameters Type Name Description MetroRenderer _renderer BaseUIQuestion root Overrides BaseQuestionGenerator.Init(MetroRenderer, BaseUIQuestion) SetRegion(Region) Declaration public override void SetRegion(Region region) Parameters Type Name Description Region region Overrides BaseQuestionGenerator.SetRegion(Region)"
  },
  "api/Gameplay.Questions.UIQuestion.html": {
    "href": "api/Gameplay.Questions.UIQuestion.html",
    "title": "Class UIQuestion | Metro Connoisseur documentation",
    "keywords": "Class UIQuestion Inheritance Object UIQuestion Namespace : Gameplay.Questions Assembly : cs.temp.dll.dll Syntax public class UIQuestion : MonoBehaviour Fields answerField Declaration public TMP_InputField answerField Field Value Type Description TMP_InputField progressBar Declaration public Slider progressBar Field Value Type Description Slider questions Declaration public QuestionsDB questions Field Value Type Description QuestionsDB questionText Declaration public TMP_Text questionText Field Value Type Description TMP_Text resultText Declaration public TMP_Text resultText Field Value Type Description TMP_Text Methods CheckAnswer() Declaration public void CheckAnswer()"
  },
  "api/Gameplay.Questions.UITipContainer.html": {
    "href": "api/Gameplay.Questions.UITipContainer.html",
    "title": "Class UITipContainer | Metro Connoisseur documentation",
    "keywords": "Class UITipContainer UI element to represent a tip Inheritance Object UITipContainer Namespace : Gameplay.Questions Assembly : cs.temp.dll.dll Syntax public class UITipContainer : MonoBehaviour Fields numText Declaration public TMP_Text numText Field Value Type Description TMP_Text tipText Declaration public TMP_Text tipText Field Value Type Description TMP_Text Methods SetTip(String, Int32) Declaration public void SetTip(string text, int index) Parameters Type Name Description String text Int32 index"
  },
  "api/Gameplay.Questions.UITipController.html": {
    "href": "api/Gameplay.Questions.UITipController.html",
    "title": "Class UITipController | Metro Connoisseur documentation",
    "keywords": "Class UITipController Controller for question tips Inheritance Object UITipController Namespace : Gameplay.Questions Assembly : cs.temp.dll.dll Syntax public class UITipController : MonoBehaviour Fields button Declaration public Button button Field Value Type Description Button buttonLabel Declaration public TMP_Text buttonLabel Field Value Type Description TMP_Text buttonTransform Declaration public Transform buttonTransform Field Value Type Description Transform maxTips Declaration public int maxTips Field Value Type Description Int32 tipPrefab Declaration public UITipContainer tipPrefab Field Value Type Description UITipContainer tipsRoot Declaration public Transform tipsRoot Field Value Type Description Transform Methods NextTip() Declaration public void NextTip()"
  },
  "api/Gameplay.SceneTransitionManager.html": {
    "href": "api/Gameplay.SceneTransitionManager.html",
    "title": "Class SceneTransitionManager | Metro Connoisseur documentation",
    "keywords": "Class SceneTransitionManager Inheritance Object SceneTransitionManager Namespace : Gameplay Assembly : cs.temp.dll.dll Syntax public class SceneTransitionManager : MonoBehaviour Fields instance Declaration public static SceneTransitionManager instance Field Value Type Description SceneTransitionManager Methods LoadMenu() Declaration public void LoadMenu() StartGame(Int32) Declaration public void StartGame(int newGameMode) Parameters Type Name Description Int32 newGameMode"
  },
  "api/Gameplay.Statistics.BoolRecord-2.html": {
    "href": "api/Gameplay.Statistics.BoolRecord-2.html",
    "title": "Class BoolRecord<T, TIndex> | Metro Connoisseur documentation",
    "keywords": "Class BoolRecord<T, TIndex> Bool record for any index-able type Inheritance Object BoolRecord<T, TIndex> Namespace : Gameplay.Statistics Assembly : cs.temp.dll.dll Syntax public class BoolRecord<T, TIndex> where T : IIndexable<TIndex> Type Parameters Name Description T Source type TIndex Index type Fields data Declaration public HashSet<TIndex> data Field Value Type Description HashSet <TIndex> Methods IsUnlocked(T) Is record unlocked? Declaration public bool IsUnlocked(T station) Parameters Type Name Description T station Returns Type Description Boolean Unlock(T) Unlock a record Declaration public void Unlock(T station) Parameters Type Name Description T station"
  },
  "api/Gameplay.Statistics.html": {
    "href": "api/Gameplay.Statistics.html",
    "title": "Namespace Gameplay.Statistics | Metro Connoisseur documentation",
    "keywords": "Namespace Gameplay.Statistics Classes BoolRecord<T, TIndex> Bool record for any index-able type StatisticsEntry Model class for game statistics data Interfaces IIndexable<T> Generic interface for index-able types"
  },
  "api/Gameplay.Statistics.IIndexable-1.html": {
    "href": "api/Gameplay.Statistics.IIndexable-1.html",
    "title": "Interface IIndexable<T> | Metro Connoisseur documentation",
    "keywords": "Interface IIndexable<T> Generic interface for index-able types Namespace : Gameplay.Statistics Assembly : cs.temp.dll.dll Syntax public interface IIndexable<out T> Type Parameters Name Description T Index type Properties index Declaration T index { get; } Property Value Type Description T"
  },
  "api/Gameplay.Statistics.StatisticsEntry.html": {
    "href": "api/Gameplay.Statistics.StatisticsEntry.html",
    "title": "Class StatisticsEntry | Metro Connoisseur documentation",
    "keywords": "Class StatisticsEntry Model class for game statistics data Inheritance Object StatisticsEntry Namespace : Gameplay.Statistics Assembly : cs.temp.dll.dll Syntax public class StatisticsEntry : ISaveData Fields averageAnswerTime Declaration public float averageAnswerTime Field Value Type Description Single correctAnswers Declaration public int correctAnswers Field Value Type Description Int32 correctAnswerStreak Declaration public int correctAnswerStreak Field Value Type Description Int32 dataVersion Declaration public int dataVersion Field Value Type Description Int32 fastestCorrectAnswer Declaration public float fastestCorrectAnswer Field Value Type Description Single gameModeState Declaration public Dictionary<string, bool> gameModeState Field Value Type Description Dictionary < String , Boolean > logestCorrectAnswerStreak Declaration public int logestCorrectAnswerStreak Field Value Type Description Int32 maximumCorrectAnswerTime Declaration public float maximumCorrectAnswerTime Field Value Type Description Single maxScore Declaration public int maxScore Field Value Type Description Int32 tickets Declaration public int tickets Field Value Type Description Int32 totalAnswers Declaration public int totalAnswers Field Value Type Description Int32 unlockedAchievements Declaration public BoolRecord<Achievement, string> unlockedAchievements Field Value Type Description BoolRecord < Achievement , String > unlockedLines Declaration public BoolRecord<MetroLine, int> unlockedLines Field Value Type Description BoolRecord < MetroLine , Int32 > unlockedStations Declaration public BoolRecord<MetroStation, int> unlockedStations Field Value Type Description BoolRecord < MetroStation , Int32 > Properties Version Declaration public int Version { get; set; } Property Value Type Description Int32 Methods Append(StatisticsEntry) Declaration public void Append(StatisticsEntry other) Parameters Type Name Description StatisticsEntry other CalculateScore() Declaration public List<ScoreItem> CalculateScore() Returns Type Description List < ScoreItem > GetGameState(String) Declaration public bool GetGameState(string gameMode) Parameters Type Name Description String gameMode Returns Type Description Boolean SetGameState(String, Boolean) Declaration public void SetGameState(string gameMode, bool value) Parameters Type Name Description String gameMode Boolean value"
  },
  "api/Gameplay.UI.CanvasSafeArea.html": {
    "href": "api/Gameplay.UI.CanvasSafeArea.html",
    "title": "Class CanvasSafeArea | Metro Connoisseur documentation",
    "keywords": "Class CanvasSafeArea Helper UI class that ensures that all UI elements are within device safe area Inheritance Object CanvasSafeArea Namespace : Gameplay.UI Assembly : cs.temp.dll.dll Syntax public class CanvasSafeArea : MonoBehaviour Fields OnResolutionOrOrientationChanged Declaration public static UnityEvent OnResolutionOrOrientationChanged Field Value Type Description UnityEvent"
  },
  "api/Gameplay.UI.DynamicText.html": {
    "href": "api/Gameplay.UI.DynamicText.html",
    "title": "Class DynamicText | Metro Connoisseur documentation",
    "keywords": "Class DynamicText Class for displaying text with dynamic dots Inheritance Object DynamicText Namespace : Gameplay.UI Assembly : cs.temp.dll.dll Syntax public class DynamicText : MonoBehaviour Fields maxDots Declaration public int maxDots Field Value Type Description Int32 text Declaration public string text Field Value Type Description String"
  },
  "api/Gameplay.UI.FadeDirection.html": {
    "href": "api/Gameplay.UI.FadeDirection.html",
    "title": "Enum FadeDirection | Metro Connoisseur documentation",
    "keywords": "Enum FadeDirection Namespace : Gameplay.UI Assembly : cs.temp.dll.dll Syntax public enum FadeDirection Fields Name Description FADE_IN FADE_OUT"
  },
  "api/Gameplay.UI.FadeInOut.html": {
    "href": "api/Gameplay.UI.FadeInOut.html",
    "title": "Class FadeInOut | Metro Connoisseur documentation",
    "keywords": "Class FadeInOut UI helper that can fade a UI element in or out Inheritance Object FadeInOut Namespace : Gameplay.UI Assembly : cs.temp.dll.dll Syntax public class FadeInOut : MonoBehaviour Fields fadeTime Declaration public float fadeTime Field Value Type Description Single Methods Fade(FadeDirection) Start a fade in a certain direction Declaration public void Fade(FadeDirection direction) Parameters Type Name Description FadeDirection direction FadeIn() Start a fade in Declaration public void FadeIn() FadeOut() Start a fade out Declaration public void FadeOut()"
  },
  "api/Gameplay.UI.html": {
    "href": "api/Gameplay.UI.html",
    "title": "Namespace Gameplay.UI | Metro Connoisseur documentation",
    "keywords": "Namespace Gameplay.UI Classes CanvasSafeArea Helper UI class that ensures that all UI elements are within device safe area DynamicText Class for displaying text with dynamic dots FadeInOut UI helper that can fade a UI element in or out PaletteGraphic UI helper that ensures all UI elements are using correct colors PaletteSpriteSwitch SlowPlayback Utility to control how fast PlayableDirector plays the timeline UIAchievement UI element to display achievement popup UIFillAnimation UIGame UIGameOverScreen Controls how game over screen is displayed. UIIntro UIScoreItem Score entry in game over screen UI UISettings UIStartGameButton UITopBar Top bar UI controller VersionText Controls version text Structs ScoreItem Struct for data about one score point Enums FadeDirection"
  },
  "api/Gameplay.UI.PaletteGraphic.html": {
    "href": "api/Gameplay.UI.PaletteGraphic.html",
    "title": "Class PaletteGraphic | Metro Connoisseur documentation",
    "keywords": "Class PaletteGraphic UI helper that ensures all UI elements are using correct colors Inheritance Object PaletteGraphic Namespace : Gameplay.UI Assembly : cs.temp.dll.dll Syntax public class PaletteGraphic : MonoBehaviour Fields colorName Declaration public string colorName Field Value Type Description String keepAlpha Declaration public bool keepAlpha Field Value Type Description Boolean useColorOnSprites Declaration public bool useColorOnSprites Field Value Type Description Boolean Methods ApplyColor() Declaration public void ApplyColor()"
  },
  "api/Gameplay.UI.PaletteSpriteSwitch.html": {
    "href": "api/Gameplay.UI.PaletteSpriteSwitch.html",
    "title": "Class PaletteSpriteSwitch | Metro Connoisseur documentation",
    "keywords": "Class PaletteSpriteSwitch Inheritance Object PaletteSpriteSwitch Namespace : Gameplay.UI Assembly : cs.temp.dll.dll Syntax public class PaletteSpriteSwitch : MonoBehaviour Fields paletteSprites Declaration public Sprite[] paletteSprites Field Value Type Description Sprite [] Methods ApplySprite() Declaration public void ApplySprite()"
  },
  "api/Gameplay.UI.ScoreItem.html": {
    "href": "api/Gameplay.UI.ScoreItem.html",
    "title": "Struct ScoreItem | Metro Connoisseur documentation",
    "keywords": "Struct ScoreItem Struct for data about one score point Namespace : Gameplay.UI Assembly : cs.temp.dll.dll Syntax public struct ScoreItem Constructors ScoreItem(String, String, Int32) Declaration public ScoreItem(string name, string stateText, int points) Parameters Type Name Description String name String stateText Int32 points Fields name Declaration public string name Field Value Type Description String points Declaration public int points Field Value Type Description Int32 stateText Declaration public string stateText Field Value Type Description String"
  },
  "api/Gameplay.UI.SlowPlayback.html": {
    "href": "api/Gameplay.UI.SlowPlayback.html",
    "title": "Class SlowPlayback | Metro Connoisseur documentation",
    "keywords": "Class SlowPlayback Utility to control how fast PlayableDirector plays the timeline Inheritance Object SlowPlayback Namespace : Gameplay.UI Assembly : cs.temp.dll.dll Syntax public class SlowPlayback : MonoBehaviour Fields currentTime Declaration public float currentTime Field Value Type Description Single maxTime Declaration public float maxTime Field Value Type Description Single speed Declaration public float speed Field Value Type Description Single"
  },
  "api/Gameplay.UI.UIAchievement.html": {
    "href": "api/Gameplay.UI.UIAchievement.html",
    "title": "Class UIAchievement | Metro Connoisseur documentation",
    "keywords": "Class UIAchievement UI element to display achievement popup Inheritance Object UIAchievement Namespace : Gameplay.UI Assembly : cs.temp.dll.dll Syntax public class UIAchievement : MonoBehaviour Fields achievementData Declaration public AchievementDB achievementData Field Value Type Description AchievementDB achievementIcon Declaration public Image achievementIcon Field Value Type Description Image achievementName Declaration public TMP_Text achievementName Field Value Type Description TMP_Text achievementText Declaration public TMP_Text achievementText Field Value Type Description TMP_Text timeIn Declaration public float timeIn Field Value Type Description Single timeOut Declaration public float timeOut Field Value Type Description Single timeStay Declaration public float timeStay Field Value Type Description Single Methods Popup(Achievement) Declaration public void Popup(Achievement achievement) Parameters Type Name Description Achievement achievement UnlockAchievement(String) Declaration public static void UnlockAchievement(string key) Parameters Type Name Description String key"
  },
  "api/Gameplay.UI.UIFillAnimation.html": {
    "href": "api/Gameplay.UI.UIFillAnimation.html",
    "title": "Class UIFillAnimation | Metro Connoisseur documentation",
    "keywords": "Class UIFillAnimation Inheritance Object UIFillAnimation Namespace : Gameplay.UI Assembly : cs.temp.dll.dll Syntax public class UIFillAnimation : MonoBehaviour Fields fillTime Declaration public float fillTime Field Value Type Description Single Methods Display(Single, Single) Declaration public void Display(float current, float next) Parameters Type Name Description Single current Single next"
  },
  "api/Gameplay.UI.UIGame.html": {
    "href": "api/Gameplay.UI.UIGame.html",
    "title": "Class UIGame | Metro Connoisseur documentation",
    "keywords": "Class UIGame Inheritance Object UIGame Namespace : Gameplay.UI Assembly : cs.temp.dll.dll Syntax public class UIGame : MonoBehaviour Fields answerPanelSwipe Declaration public UISwipe answerPanelSwipe Field Value Type Description UISwipe confirmButton Declaration public Button confirmButton Field Value Type Description Button confirmButtonText Declaration public TMP_Text confirmButtonText Field Value Type Description TMP_Text startGameButton Declaration public UIStartGameButton startGameButton Field Value Type Description UIStartGameButton topBar Declaration public UITopBar topBar Field Value Type Description UITopBar touchButton Declaration public TouchButton touchButton Field Value Type Description TouchButton Methods DisableStartButton() Declaration public void DisableStartButton() EnableStartButton(String) Declaration public void EnableStartButton(string gameModeText) Parameters Type Name Description String gameModeText SetConfirmText(String, Boolean) Declaration public void SetConfirmText(string text, bool interactable = true) Parameters Type Name Description String text Boolean interactable SetStartInteractable(Boolean) Declaration public void SetStartInteractable(bool interactable) Parameters Type Name Description Boolean interactable"
  },
  "api/Gameplay.UI.UIGameOverScreen.html": {
    "href": "api/Gameplay.UI.UIGameOverScreen.html",
    "title": "Class UIGameOverScreen | Metro Connoisseur documentation",
    "keywords": "Class UIGameOverScreen Controls how game over screen is displayed. Inheritance Object UIGameOverScreen Namespace : Gameplay.UI Assembly : cs.temp.dll.dll Syntax public class UIGameOverScreen : MonoBehaviour Fields animation Declaration public UIFillAnimation animation Field Value Type Description UIFillAnimation arcadeScreen Declaration public GameObject arcadeScreen Field Value Type Description GameObject correctText Declaration public TMP_Text correctText Field Value Type Description TMP_Text learningScreen Declaration public GameObject learningScreen Field Value Type Description GameObject scoreItemPrefab Declaration public UIScoreItem scoreItemPrefab Field Value Type Description UIScoreItem statsTrans Declaration public Transform statsTrans Field Value Type Description Transform ticketsText Declaration public TMP_Text ticketsText Field Value Type Description TMP_Text totalScoreText Declaration public TMP_Text totalScoreText Field Value Type Description TMP_Text Methods PopupArcade(StatisticsEntry, List<MetroStation>) Declaration public void PopupArcade(StatisticsEntry statistics, List<MetroStation> unlockedStations) Parameters Type Name Description StatisticsEntry statistics List < MetroStation > unlockedStations PopupLearning(Int32, Int32, Int32) Declaration public void PopupLearning(int correct, int total, int tickets) Parameters Type Name Description Int32 correct Int32 total Int32 tickets"
  },
  "api/Gameplay.UI.UIIntro.html": {
    "href": "api/Gameplay.UI.UIIntro.html",
    "title": "Class UIIntro | Metro Connoisseur documentation",
    "keywords": "Class UIIntro Inheritance Object UIIntro Namespace : Gameplay.UI Assembly : cs.temp.dll.dll Syntax public class UIIntro : MonoBehaviour Fields arcadeCard Declaration public GameObject arcadeCard Field Value Type Description GameObject historicCard Declaration public GameObject historicCard Field Value Type Description GameObject learningCard Declaration public GameObject learningCard Field Value Type Description GameObject"
  },
  "api/Gameplay.UI.UIScoreItem.html": {
    "href": "api/Gameplay.UI.UIScoreItem.html",
    "title": "Class UIScoreItem | Metro Connoisseur documentation",
    "keywords": "Class UIScoreItem Score entry in game over screen UI Inheritance Object UIScoreItem Namespace : Gameplay.UI Assembly : cs.temp.dll.dll Syntax public class UIScoreItem : MonoBehaviour Fields scoreCountText Declaration public TMP_Text scoreCountText Field Value Type Description TMP_Text scoreLabel Declaration public TMP_Text scoreLabel Field Value Type Description TMP_Text"
  },
  "api/Gameplay.UI.UISettings.html": {
    "href": "api/Gameplay.UI.UISettings.html",
    "title": "Class UISettings | Metro Connoisseur documentation",
    "keywords": "Class UISettings Inheritance Object UISettings Namespace : Gameplay.UI Assembly : cs.temp.dll.dll Syntax public class UISettings : MonoBehaviour Fields crossfade Declaration public GameObject crossfade Field Value Type Description GameObject difficultyToggleGroup Declaration public EventToggleGroup difficultyToggleGroup Field Value Type Description EventToggleGroup themeToggle Declaration public Toggle themeToggle Field Value Type Description Toggle Methods LoadGame(Int32) Declaration public void LoadGame(int gameMode) Parameters Type Name Description Int32 gameMode LoadMenu() Declaration public void LoadMenu() SetDifficulty(Int32) Declaration public void SetDifficulty(int level) Parameters Type Name Description Int32 level SetTheme(Boolean) Declaration public void SetTheme(bool light) Parameters Type Name Description Boolean light"
  },
  "api/Gameplay.UI.UIStartGameButton.html": {
    "href": "api/Gameplay.UI.UIStartGameButton.html",
    "title": "Class UIStartGameButton | Metro Connoisseur documentation",
    "keywords": "Class UIStartGameButton Inheritance Object UIStartGameButton Namespace : Gameplay.UI Assembly : cs.temp.dll.dll Syntax public class UIStartGameButton : MonoBehaviour Fields button Declaration public Button button Field Value Type Description Button buttonTitle Declaration public TMP_Text buttonTitle Field Value Type Description TMP_Text gameModeText Declaration public TMP_Text gameModeText Field Value Type Description TMP_Text"
  },
  "api/Gameplay.UI.UITopBar.html": {
    "href": "api/Gameplay.UI.UITopBar.html",
    "title": "Class UITopBar | Metro Connoisseur documentation",
    "keywords": "Class UITopBar Top bar UI controller Inheritance Object UITopBar Namespace : Gameplay.UI Assembly : cs.temp.dll.dll Syntax public class UITopBar : MonoBehaviour Fields attemptsFill Declaration public Image attemptsFill Field Value Type Description Image attemptsLabel Declaration public TMP_Text attemptsLabel Field Value Type Description TMP_Text fillSpeed Declaration public float fillSpeed Field Value Type Description Single gameModeLabel Declaration public TMP_Text gameModeLabel Field Value Type Description TMP_Text statusLabel Declaration public TMP_Text statusLabel Field Value Type Description TMP_Text tipButtonObject Declaration public GameObject tipButtonObject Field Value Type Description GameObject troykaImage Declaration public Image troykaImage Field Value Type Description Image Methods SetCurrentAttempts(Int32, Int32, Single) Declaration public void SetCurrentAttempts(int current, int newValue, float partial) Parameters Type Name Description Int32 current Int32 newValue Single partial SetCurrentAttemptsImmidiate(Int32, Single) Declaration public void SetCurrentAttemptsImmidiate(int value, float partial) Parameters Type Name Description Int32 value Single partial SetCurrentLabel(String) Declaration public void SetCurrentLabel(string text) Parameters Type Name Description String text ShowMessage(String) Declaration public void ShowMessage(string message) Parameters Type Name Description String message StartCountdown(Single) Declaration public void StartCountdown(float time) Parameters Type Name Description Single time UpdateStatus(Boolean, Int32, Int32) Declaration public void UpdateStatus(bool lastCorrect, int current, int total) Parameters Type Name Description Boolean lastCorrect Int32 current Int32 total UpdateTickets(Int32) Declaration public void UpdateTickets(int tickets) Parameters Type Name Description Int32 tickets"
  },
  "api/Gameplay.UI.VersionText.html": {
    "href": "api/Gameplay.UI.VersionText.html",
    "title": "Class VersionText | Metro Connoisseur documentation",
    "keywords": "Class VersionText Controls version text Inheritance Object VersionText Namespace : Gameplay.UI Assembly : cs.temp.dll.dll Syntax public class VersionText : MonoBehaviour"
  },
  "api/Gameplay.World.html": {
    "href": "api/Gameplay.World.html",
    "title": "Namespace Gameplay.World | Metro Connoisseur documentation",
    "keywords": "Namespace Gameplay.World Classes RandomAudioSource"
  },
  "api/Gameplay.World.RandomAudioSource.html": {
    "href": "api/Gameplay.World.RandomAudioSource.html",
    "title": "Class RandomAudioSource | Metro Connoisseur documentation",
    "keywords": "Class RandomAudioSource Inheritance Object RandomAudioSource Namespace : Gameplay.World Assembly : cs.temp.dll.dll Syntax public class RandomAudioSource : MonoBehaviour Fields clips Declaration public AudioClip[] clips Field Value Type Description AudioClip [] loop Declaration public bool loop Field Value Type Description Boolean playbackDelay Declaration public float playbackDelay Field Value Type Description Single selectedClip Declaration public int selectedClip Field Value Type Description Int32 selectOnAwake Declaration public bool selectOnAwake Field Value Type Description Boolean Methods Play() Declaration public void Play() Stop() Declaration public void Stop()"
  },
  "api/ScriptableObjects.Achievement.html": {
    "href": "api/ScriptableObjects.Achievement.html",
    "title": "Class Achievement | Metro Connoisseur documentation",
    "keywords": "Class Achievement Defines an achievement Inheritance Object Achievement Implements GenericItem IIndexable < String > Namespace : ScriptableObjects Assembly : cs.temp.dll.dll Syntax public class Achievement : GenericItem Fields description Declaration public string description Field Value Type Description String icon Declaration public Sprite icon Field Value Type Description Sprite id Declaration public string id Field Value Type Description String name Declaration public string name Field Value Type Description String Properties index Declaration public string index { get; } Property Value Type Description String ItemId Declaration public string ItemId { get; } Property Value Type Description String Implements GenericItem IIndexable<>"
  },
  "api/ScriptableObjects.AchievementDB.html": {
    "href": "api/ScriptableObjects.AchievementDB.html",
    "title": "Class AchievementDB | Metro Connoisseur documentation",
    "keywords": "Class AchievementDB Data store for existing achievements Inheritance Object GenericDB < Achievement > AchievementDB Inherited Members GenericDB<Achievement>.Get(String) GenericDB<Achievement>.GetAll() GenericDB<Achievement>.Count() Namespace : ScriptableObjects Assembly : cs.temp.dll.dll Syntax public class AchievementDB : GenericDB<Achievement>"
  },
  "api/ScriptableObjects.ColorPalette.html": {
    "href": "api/ScriptableObjects.ColorPalette.html",
    "title": "Class ColorPalette | Metro Connoisseur documentation",
    "keywords": "Class ColorPalette Data store for known Theme Inheritance Object ColorPalette Namespace : ScriptableObjects Assembly : cs.temp.dll.dll Syntax public class ColorPalette : ScriptableObject Fields m_themeIndex Declaration public int m_themeIndex Field Value Type Description Int32 paletteChanged Declaration public static Action paletteChanged Field Value Type Description Action themes Declaration public List<Theme> themes Field Value Type Description List < Theme > Properties currentTheme Declaration public Theme currentTheme { get; } Property Value Type Description Theme themeIndex Declaration public int themeIndex { get; set; } Property Value Type Description Int32"
  },
  "api/ScriptableObjects.Difficulty.html": {
    "href": "api/ScriptableObjects.Difficulty.html",
    "title": "Class Difficulty | Metro Connoisseur documentation",
    "keywords": "Class Difficulty Inheritance Object Difficulty Namespace : ScriptableObjects Assembly : cs.temp.dll.dll Syntax public class Difficulty Fields allowHints Declaration public bool allowHints Field Value Type Description Boolean difficultyName Declaration public string difficultyName Field Value Type Description String maxAttempts Declaration public int maxAttempts Field Value Type Description Int32 partialPerAttempt Declaration public int partialPerAttempt Field Value Type Description Int32"
  },
  "api/ScriptableObjects.DifficultyConfig.html": {
    "href": "api/ScriptableObjects.DifficultyConfig.html",
    "title": "Class DifficultyConfig | Metro Connoisseur documentation",
    "keywords": "Class DifficultyConfig Data store for difficulties Inheritance Object DifficultyConfig Namespace : ScriptableObjects Assembly : cs.temp.dll.dll Syntax public class DifficultyConfig : ScriptableObject Fields difficulties Declaration public List<Difficulty> difficulties Field Value Type Description List < Difficulty >"
  },
  "api/ScriptableObjects.GenericDB-1.html": {
    "href": "api/ScriptableObjects.GenericDB-1.html",
    "title": "Class GenericDB<T> | Metro Connoisseur documentation",
    "keywords": "Class GenericDB<T> Generic data store for any item keyed by string id's Inheritance Object GenericDB<T> AchievementDB QuestionsDB Namespace : ScriptableObjects Assembly : cs.temp.dll.dll Syntax public class GenericDB<T> : ScriptableObject where T : GenericItem Type Parameters Name Description T Model class, implementing GenericItem Methods Count() Declaration public int Count() Returns Type Description Int32 Get(String) Declaration public T Get(string key) Parameters Type Name Description String key Returns Type Description T GetAll() Declaration public T[] GetAll() Returns Type Description T[]"
  },
  "api/ScriptableObjects.GenericItem.html": {
    "href": "api/ScriptableObjects.GenericItem.html",
    "title": "Interface GenericItem | Metro Connoisseur documentation",
    "keywords": "Interface GenericItem Base class for generic items keyed by string id's Namespace : ScriptableObjects Assembly : cs.temp.dll.dll Syntax public interface GenericItem Properties ItemId Declaration string ItemId { get; } Property Value Type Description String"
  },
  "api/ScriptableObjects.html": {
    "href": "api/ScriptableObjects.html",
    "title": "Namespace ScriptableObjects | Metro Connoisseur documentation",
    "keywords": "Namespace ScriptableObjects Classes Achievement Defines an achievement AchievementDB Data store for existing achievements ColorPalette Data store for known Theme Difficulty DifficultyConfig Data store for difficulties GenericDB<T> Generic data store for any item keyed by string id's PlayerConfig Player default controls configuration Question Defines a simple question QuestionsDB Data store for simple questions Theme Defines a theme with all of the palette colors Interfaces GenericItem Base class for generic items keyed by string id's"
  },
  "api/ScriptableObjects.PlayerConfig.html": {
    "href": "api/ScriptableObjects.PlayerConfig.html",
    "title": "Class PlayerConfig | Metro Connoisseur documentation",
    "keywords": "Class PlayerConfig Player default controls configuration Inheritance Object PlayerConfig Namespace : ScriptableObjects Assembly : cs.temp.dll.dll Syntax public class PlayerConfig : ScriptableObject Fields friction Declaration public float friction Field Value Type Description Single maxZoom Declaration public float maxZoom Field Value Type Description Single minZoom Declaration public float minZoom Field Value Type Description Single moveSmoothTime Declaration public float moveSmoothTime Field Value Type Description Single normalMaxSpeed Declaration public float normalMaxSpeed Field Value Type Description Single normalSmoothTime Declaration public float normalSmoothTime Field Value Type Description Single scrollSensitivity Declaration public float scrollSensitivity Field Value Type Description Single zoomSpeed Declaration public float zoomSpeed Field Value Type Description Single"
  },
  "api/ScriptableObjects.Question.html": {
    "href": "api/ScriptableObjects.Question.html",
    "title": "Class Question | Metro Connoisseur documentation",
    "keywords": "Class Question Defines a simple question Inheritance Object Question Implements GenericItem Namespace : ScriptableObjects Assembly : cs.temp.dll.dll Syntax public class Question : GenericItem Fields itemId Declaration public string itemId Field Value Type Description String QuestionAnswer Declaration public string QuestionAnswer Field Value Type Description String QuestionText Declaration public string QuestionText Field Value Type Description String Properties ItemId Declaration public string ItemId { get; } Property Value Type Description String Implements GenericItem"
  },
  "api/ScriptableObjects.QuestionsDB.html": {
    "href": "api/ScriptableObjects.QuestionsDB.html",
    "title": "Class QuestionsDB | Metro Connoisseur documentation",
    "keywords": "Class QuestionsDB Data store for simple questions Inheritance Object GenericDB < Question > QuestionsDB Inherited Members GenericDB<Question>.Get(String) GenericDB<Question>.GetAll() GenericDB<Question>.Count() Namespace : ScriptableObjects Assembly : cs.temp.dll.dll Syntax public class QuestionsDB : GenericDB<Question>"
  },
  "api/ScriptableObjects.Theme.html": {
    "href": "api/ScriptableObjects.Theme.html",
    "title": "Class Theme | Metro Connoisseur documentation",
    "keywords": "Class Theme Defines a theme with all of the palette colors Inheritance Object Theme Namespace : ScriptableObjects Assembly : cs.temp.dll.dll Syntax public class Theme Fields background Declaration public Color background Field Value Type Description Color buttonColor Declaration public Color buttonColor Field Value Type Description Color highlightColor Declaration public Color highlightColor Field Value Type Description Color lineColor Declaration public Color lineColor Field Value Type Description Color middleBackground Declaration public Color middleBackground Field Value Type Description Color rightAnswer Declaration public Color rightAnswer Field Value Type Description Color secondareBackground Declaration public Color secondareBackground Field Value Type Description Color textColor Declaration public Color textColor Field Value Type Description Color themeName Declaration public string themeName Field Value Type Description String unfocusedColor Declaration public Color unfocusedColor Field Value Type Description Color wrongAnswer Declaration public Color wrongAnswer Field Value Type Description Color"
  },
  "api/Util.EventManager.html": {
    "href": "api/Util.EventManager.html",
    "title": "Class EventManager | Metro Connoisseur documentation",
    "keywords": "Class EventManager Inheritance Object EventManager Namespace : Util Assembly : cs.temp.dll.dll Syntax public static class EventManager Methods StartListening(String, Action<Object[]>) Declaration public static void StartListening(string eventType, Action<object[]> listener) Parameters Type Name Description String eventType Action < Object []> listener StopListening(String, Action<Object[]>) Declaration public static void StopListening(string eventType, Action<object[]> listener) Parameters Type Name Description String eventType Action < Object []> listener TriggerEvent(String, Object[]) Declaration public static void TriggerEvent(string eventType, params object[] arguments) Parameters Type Name Description String eventType Object [] arguments"
  },
  "api/Util.EventToggleGroup.html": {
    "href": "api/Util.EventToggleGroup.html",
    "title": "Class EventToggleGroup | Metro Connoisseur documentation",
    "keywords": "Class EventToggleGroup Inheritance Object EventToggleGroup Namespace : Util Assembly : cs.temp.dll.dll Syntax public class EventToggleGroup : MonoBehaviour Fields onActiveTogglesChanged Declaration public EventToggleGroup.ToggleEvent onActiveTogglesChanged Field Value Type Description EventToggleGroup.ToggleEvent Methods SetToggle(Int32) Declaration public void SetToggle(int index) Parameters Type Name Description Int32 index"
  },
  "api/Util.EventToggleGroup.ToggleEvent.html": {
    "href": "api/Util.EventToggleGroup.ToggleEvent.html",
    "title": "Class EventToggleGroup.ToggleEvent | Metro Connoisseur documentation",
    "keywords": "Class EventToggleGroup.ToggleEvent Inheritance Object EventToggleGroup.ToggleEvent Namespace : Util Assembly : cs.temp.dll.dll Syntax [Serializable] public class ToggleEvent : UnityEvent<int>"
  },
  "api/Util.GameObjectExtensions.html": {
    "href": "api/Util.GameObjectExtensions.html",
    "title": "Class GameObjectExtensions | Metro Connoisseur documentation",
    "keywords": "Class GameObjectExtensions Extension methods for GameObjects and MonoBehaviors Inheritance Object GameObjectExtensions Namespace : Util Assembly : cs.temp.dll.dll Syntax public static class GameObjectExtensions Methods ClearChildren(GameObject) Destroy all children of this game object Declaration public static void ClearChildren(this GameObject thatObject) Parameters Type Name Description GameObject thatObject Invoke(MonoBehaviour, String, Object, Single) Invoke method after delay with arguments Declaration public static void Invoke(this MonoBehaviour behaviour, string method, object options, float delay) Parameters Type Name Description MonoBehaviour behaviour String method Object options Single delay"
  },
  "api/Util.HideOnStart.html": {
    "href": "api/Util.HideOnStart.html",
    "title": "Class HideOnStart | Metro Connoisseur documentation",
    "keywords": "Class HideOnStart Hide game object this is attached to Inheritance Object HideOnStart Namespace : Util Assembly : cs.temp.dll.dll Syntax public class HideOnStart : MonoBehaviour"
  },
  "api/Util.html": {
    "href": "api/Util.html",
    "title": "Namespace Util | Metro Connoisseur documentation",
    "keywords": "Namespace Util Classes EventManager EventToggleGroup EventToggleGroup.ToggleEvent GameObjectExtensions Extension methods for GameObjects and MonoBehaviors HideOnStart Hide game object this is attached to InspectorButtonAttribute LabeledArrayAttribute Property drawer attribute to name all array elements, elements must implement INamedArrayElement MathExtensions Math and Vector extension methods PauseController RandomUtils Helper methods to generate random numbers RenameAttribute Property drawer attribute to rename property RendererGroup ShowWhenAttribute Attribute used to show or hide the Field depending on certain conditions SortingLayer SplineUtil Extension class to work with splines StringExtension UIUtil Helper class to detect UI raycast hits Interfaces INamedArrayElement"
  },
  "api/Util.INamedArrayElement.html": {
    "href": "api/Util.INamedArrayElement.html",
    "title": "Interface INamedArrayElement | Metro Connoisseur documentation",
    "keywords": "Interface INamedArrayElement Namespace : Util Assembly : cs.temp.dll.dll Syntax public interface INamedArrayElement Properties displayName Declaration string displayName { get; } Property Value Type Description String editorName Declaration string editorName { get; } Property Value Type Description String"
  },
  "api/Util.InspectorButtonAttribute.html": {
    "href": "api/Util.InspectorButtonAttribute.html",
    "title": "Class InspectorButtonAttribute | Metro Connoisseur documentation",
    "keywords": "Class InspectorButtonAttribute Inheritance Object InspectorButtonAttribute Namespace : Util Assembly : cs.temp.dll.dll Syntax public class InspectorButtonAttribute : Attribute"
  },
  "api/Util.LabeledArrayAttribute.html": {
    "href": "api/Util.LabeledArrayAttribute.html",
    "title": "Class LabeledArrayAttribute | Metro Connoisseur documentation",
    "keywords": "Class LabeledArrayAttribute Property drawer attribute to name all array elements, elements must implement INamedArrayElement Inheritance Object LabeledArrayAttribute Namespace : Util Assembly : cs.temp.dll.dll Syntax public class LabeledArrayAttribute : PropertyAttribute Constructors LabeledArrayAttribute() Declaration public LabeledArrayAttribute()"
  },
  "api/Util.MathExtensions.html": {
    "href": "api/Util.MathExtensions.html",
    "title": "Class MathExtensions | Metro Connoisseur documentation",
    "keywords": "Class MathExtensions Math and Vector extension methods Inheritance Object MathExtensions Namespace : Util Assembly : cs.temp.dll.dll Syntax public static class MathExtensions Methods Abs(Vector2) Abs vector values per axis Declaration public static Vector2 Abs(this Vector2 vector) Parameters Type Name Description Vector2 vector Returns Type Description Vector2 Apply(Vector2, Func<Single, Int32>) Apply function to all components of vector Declaration public static Vector2Int Apply(this Vector2 vec, Func<float, int> func) Parameters Type Name Description Vector2 vec Func < Single , Int32 > func Returns Type Description Vector2Int Apply(Vector2, Func<Single, Single>) Apply function to all components of vector Declaration public static Vector2 Apply(this Vector2 vec, Func<float, float> func) Parameters Type Name Description Vector2 vec Func < Single , Single > func Returns Type Description Vector2 Approximately(Single, Single, Single) Check if two values are approximately equal Declaration public static bool Approximately(float a, float b, float tolerance = 1E-05F) Parameters Type Name Description Single a Single b Single tolerance Returns Type Description Boolean AreParralel(Vector2, Vector2, Vector2, Vector2) Check if two lines defined by end and start are parallel Declaration public static bool AreParralel(Vector2 p1start, Vector2 p1end, Vector2 p2start, Vector2 p2end) Parameters Type Name Description Vector2 p1start Vector2 p1end Vector2 p2start Vector2 p2end Returns Type Description Boolean Average(Single, Single, Int32) Calculate running exponential average Declaration public static float Average(this float current, float newValue, int total) Parameters Type Name Description Single current Single newValue Int32 total Returns Type Description Single Average(Single, Single, Int32, Int32) Declaration public static float Average(this float current, float other, int currentCount, int otherCount) Parameters Type Name Description Single current Single other Int32 currentCount Int32 otherCount Returns Type Description Single Clamp2(Rect, Vector2, Single) Extends/shrinks the rect by extendDistance to each side and then restricts the given vector to the resulting rect. Declaration public static Vector2 Clamp2(this Rect rect, Vector2 position, float extendDistance = 0F) Parameters Type Name Description Rect rect The Rect. Vector2 position A position that should be restricted to the rect. Single extendDistance The distance to extend/shrink the rect to each side. Returns Type Description Vector2 The vector, clamped to the Rect. Clamp3(Rect, Vector3, Single) Extends/shrinks the rect by extendDistance to each side and then restricts the given vector to the resulting rect. The z component is kept. Declaration public static Vector3 Clamp3(this Rect rect, Vector3 position, float extendDistance = 0F) Parameters Type Name Description Rect rect The Rect. Vector3 position A position that should be restricted to the rect. Single extendDistance The distance to extend/shrink the rect to each side. Returns Type Description Vector3 The vector, clamped to the Rect. ClampHorizontal(Vector3, Single) Clamp vector in horizontal axis (XZ) Declaration public static Vector3 ClampHorizontal(this Vector3 vector, float maxMagnitude) Parameters Type Name Description Vector3 vector Single maxMagnitude Returns Type Description Vector3 CrossProduct2D(Vector2, Vector2) 2D cross product on a plane Declaration public static float CrossProduct2D(Vector2 a, Vector2 b) Parameters Type Name Description Vector2 a Vector2 b Returns Type Description Single GetCenter(IEnumerable<Vector2>, Int32) Get center of given points Declaration public static Vector2 GetCenter(this IEnumerable<Vector2> points, int count) Parameters Type Name Description IEnumerable < Vector2 > points Int32 count Returns Type Description Vector2 GetCenter(IList<Vector2>) Get center of given points Declaration public static Vector2 GetCenter(this IList<Vector2> points) Parameters Type Name Description IList < Vector2 > points Returns Type Description Vector2 GetDirection(Vector2) Determines in which direction a vector points Declaration public static string GetDirection(this Vector2 dir) Parameters Type Name Description Vector2 dir Returns Type Description String text description of direction GetNormal(Vector2) Get normal on plane for 2d vector Declaration public static Vector2 GetNormal(this Vector2 vector) Parameters Type Name Description Vector2 vector Returns Type Description Vector2 GetProjectionT(Vector2, Vector2, Vector2) Project vector onto a line defined by end and start points Declaration public static float GetProjectionT(Vector2 a, Vector2 b, Vector2 point) Parameters Type Name Description Vector2 a Vector2 b Vector2 point Returns Type Description Single value, in which 0 corresponds to point being at a, and 1 corresponds to b. Greater(Vector2, Vector2) Are all values of this vector greater than another Declaration public static bool Greater(this Vector2 vec1, Vector2 vec2) Parameters Type Name Description Vector2 vec1 Vector2 vec2 Returns Type Description Boolean Greater(Vector3, Vector3) Are all values of this vector greater than another Declaration public static bool Greater(this Vector3 vec1, Vector3 vec2) Parameters Type Name Description Vector3 vec1 Vector3 vec2 Returns Type Description Boolean IntersectLineSegments(Vector2, Vector2, Vector2, Vector2) Find intersection of 2 2D lines, defined by end and start points Declaration public static Vector2 IntersectLineSegments(Vector2 p1start, Vector2 p1end, Vector2 p2start, Vector2 p2end) Parameters Type Name Description Vector2 p1start Start point of the first line Vector2 p1end End point of the first line Vector2 p2start Start point of the second line Vector2 p2end End point of the second line Returns Type Description Vector2 Intersection point IsClockwise(List<Vector2>) Check list of points winding order Declaration public static bool IsClockwise(this List<Vector2> vertices) Parameters Type Name Description List < Vector2 > vertices Returns Type Description Boolean IsInfinity(Vector2) Check if vector values have infinity Declaration public static bool IsInfinity(this Vector2 vector) Parameters Type Name Description Vector2 vector Returns Type Description Boolean IsPointInPolygon4(List<Vector2>, Vector2) Determines if the given point is inside the polygon Declaration public static bool IsPointInPolygon4(this List<Vector2> polygon, Vector2 testPoint) Parameters Type Name Description List < Vector2 > polygon the vertices of polygon Vector2 testPoint the given point Returns Type Description Boolean true if the point is inside the polygon; otherwise, false Less(Vector2, Vector2) Are all values of this vector less than another Declaration public static bool Less(this Vector2 vec1, Vector2 vec2) Parameters Type Name Description Vector2 vec1 Vector2 vec2 Returns Type Description Boolean Less(Vector3, Vector3) Are all values of this vector less than another Declaration public static bool Less(this Vector3 vec1, Vector3 vec2) Parameters Type Name Description Vector3 vec1 Vector3 vec2 Returns Type Description Boolean Mod(Int32, Int32) Mod operation that correctly works with negative numbers Declaration public static int Mod(this int x, int m) Parameters Type Name Description Int32 x Int32 m Returns Type Description Int32 Rotate(Vector2, Single) Rotate 2d vector by angle Declaration public static Vector2 Rotate(this Vector2 v, float angle) Parameters Type Name Description Vector2 v Single angle Returns Type Description Vector2 Shuffle<T>(IList<T>) Randomly shuffle a list, such that no element can stay in it's original index Declaration public static void Shuffle<T>(this IList<T> list) Parameters Type Name Description IList <T> list Type Parameters Name Description T ToVector2(Vector3) Convert to Vector2 (XY) Declaration public static Vector2 ToVector2(this Vector3 vector) Parameters Type Name Description Vector3 vector Returns Type Description Vector2 ToVector2(Vector3Int) Convert to Vector2 (XY) Declaration public static Vector2 ToVector2(this Vector3Int vector) Parameters Type Name Description Vector3Int vector Returns Type Description Vector2 ToVector3(Vector2) Convert to Vector3 (XY) Declaration public static Vector3 ToVector3(this Vector2 vector) Parameters Type Name Description Vector2 vector Returns Type Description Vector3 WithY(Vector3, Single) Change this Vector3 by setting it's Y axis value Declaration public static Vector3 WithY(this Vector3 vector, float y) Parameters Type Name Description Vector3 vector Single y Returns Type Description Vector3"
  },
  "api/Util.PauseController.html": {
    "href": "api/Util.PauseController.html",
    "title": "Class PauseController | Metro Connoisseur documentation",
    "keywords": "Class PauseController Inheritance Object PauseController Namespace : Util Assembly : cs.temp.dll.dll Syntax public class PauseController : MonoBehaviour"
  },
  "api/Util.RandomUtils.html": {
    "href": "api/Util.RandomUtils.html",
    "title": "Class RandomUtils | Metro Connoisseur documentation",
    "keywords": "Class RandomUtils Helper methods to generate random numbers Inheritance Object RandomUtils Namespace : Util Assembly : cs.temp.dll.dll Syntax public static class RandomUtils Methods ConstrainedRandom(Func<Int32, Boolean>, Int32, Int32) Generate a number between min and max with a filter Declaration public static int ConstrainedRandom(Func<int, bool> filter, int min, int max) Parameters Type Name Description Func < Int32 , Boolean > filter Filter function, if function returns false for a number, it will not be included into random set Int32 min Int32 max Returns Type Description Int32 Exceptions Type Condition ArgumentException thrown if all numbers were excluded ConstrainedRandom(List<Int32>, Int32, Int32) Generate a number between min and max with a filter Declaration public static int ConstrainedRandom(this List<int> blacklist, int min, int max) Parameters Type Name Description List < Int32 > blacklist Any numbers in this list will no be added to random set Int32 min Int32 max Returns Type Description Int32 Exceptions Type Condition ArgumentException thrown if all numbers were excluded ConstrainedRandom(Byte, Int32, Int32) Generate a number between min and max excluding a single number Declaration public static int ConstrainedRandom(this byte exclude, int min, int max) Parameters Type Name Description Byte exclude Int32 min Int32 max Returns Type Description Int32 Exceptions Type Condition ArgumentException thrown if all numbers were excluded ConstrainedRandom(Int32, Int32, Int32) Generate a number between min and max excluding a single number Declaration public static int ConstrainedRandom(this int exclude, int min, int max) Parameters Type Name Description Int32 exclude Int32 min Int32 max Returns Type Description Int32 Exceptions Type Condition ArgumentException thrown if all numbers were excluded RandomElementByWeight<T>(IEnumerable<T>, Func<T, Single>) Declaration public static T RandomElementByWeight<T>(this IEnumerable<T> sequence, Func<T, float> weightSelector) Parameters Type Name Description IEnumerable <T> sequence Func <T, Single > weightSelector Returns Type Description T Type Parameters Name Description T"
  },
  "api/Util.RenameAttribute.html": {
    "href": "api/Util.RenameAttribute.html",
    "title": "Class RenameAttribute | Metro Connoisseur documentation",
    "keywords": "Class RenameAttribute Property drawer attribute to rename property Inheritance Object RenameAttribute Namespace : Util Assembly : cs.temp.dll.dll Syntax public class RenameAttribute : PropertyAttribute Constructors RenameAttribute(String) Declaration public RenameAttribute(string name) Parameters Type Name Description String name Properties NewName Declaration public string NewName { get; } Property Value Type Description String"
  },
  "api/Util.RendererGroup.html": {
    "href": "api/Util.RendererGroup.html",
    "title": "Class RendererGroup | Metro Connoisseur documentation",
    "keywords": "Class RendererGroup Inheritance Object RendererGroup Namespace : Util Assembly : cs.temp.dll.dll Syntax public class RendererGroup : MonoBehaviour Fields active Declaration public bool active Field Value Type Description Boolean Methods SetState(Boolean) Declaration public void SetState(bool value) Parameters Type Name Description Boolean value"
  },
  "api/Util.ShowWhenAttribute.html": {
    "href": "api/Util.ShowWhenAttribute.html",
    "title": "Class ShowWhenAttribute | Metro Connoisseur documentation",
    "keywords": "Class ShowWhenAttribute Attribute used to show or hide the Field depending on certain conditions Inheritance Object ShowWhenAttribute Namespace : Util Assembly : cs.temp.dll.dll Syntax public class ShowWhenAttribute : PropertyAttribute Constructors ShowWhenAttribute(String) Attribute used to show or hide the Field depending on certain conditions Declaration public ShowWhenAttribute(string conditionFieldName) Parameters Type Name Description String conditionFieldName Name of the bool condition Field ShowWhenAttribute(String, Object) Attribute used to show or hide the Field depending on certain conditions Declaration public ShowWhenAttribute(string conditionFieldName, object comparationValue = null) Parameters Type Name Description String conditionFieldName Name of the Field to compare (bool, enum, int or float) Object comparationValue Value to compare ShowWhenAttribute(String, Object[]) Attribute used to show or hide the Field depending on certain conditions Declaration public ShowWhenAttribute(string conditionFieldName, object[] comparationValueArray = null) Parameters Type Name Description String conditionFieldName Name of the Field to compare (bool, enum, int or float) Object [] comparationValueArray Array of values to compare (only for enums) Fields comparationValue Declaration public readonly object comparationValue Field Value Type Description Object comparationValueArray Declaration public readonly object[] comparationValueArray Field Value Type Description Object [] conditionFieldName Declaration public readonly string conditionFieldName Field Value Type Description String"
  },
  "api/Util.SortingLayer.html": {
    "href": "api/Util.SortingLayer.html",
    "title": "Class SortingLayer | Metro Connoisseur documentation",
    "keywords": "Class SortingLayer Inheritance Object SortingLayer Namespace : Util Assembly : cs.temp.dll.dll Syntax public class SortingLayer : MonoBehaviour Fields sortingLayer Declaration public string sortingLayer Field Value Type Description String sortingOrder Declaration public int sortingOrder Field Value Type Description Int32"
  },
  "api/Util.SplineUtil.html": {
    "href": "api/Util.SplineUtil.html",
    "title": "Class SplineUtil | Metro Connoisseur documentation",
    "keywords": "Class SplineUtil Extension class to work with splines Inheritance Object SplineUtil Namespace : Util Assembly : cs.temp.dll.dll Syntax public static class SplineUtil Methods CopyValues(Spline, Spline) Copy all properties of the other spline to this one Declaration public static void CopyValues(this Spline spline, Spline other) Parameters Type Name Description Spline spline Spline other"
  },
  "api/Util.StringExtension.html": {
    "href": "api/Util.StringExtension.html",
    "title": "Class StringExtension | Metro Connoisseur documentation",
    "keywords": "Class StringExtension Inheritance Object StringExtension Namespace : Util Assembly : cs.temp.dll.dll Syntax public static class StringExtension Methods FilterRuString(String) Declaration public static string FilterRuString(string value) Parameters Type Name Description String value Returns Type Description String"
  },
  "api/Util.UIUtil.html": {
    "href": "api/Util.UIUtil.html",
    "title": "Class UIUtil | Metro Connoisseur documentation",
    "keywords": "Class UIUtil Helper class to detect UI raycast hits Inheritance Object UIUtil Namespace : Util Assembly : cs.temp.dll.dll Syntax public static class UIUtil Fields UILayer Declaration public static int UILayer Field Value Type Description Int32 Methods IsPointerOverAnyUI(Vector2) Is cursorPos over any UI element? Declaration public static bool IsPointerOverAnyUI(Vector2 cursorPos) Parameters Type Name Description Vector2 cursorPos Returns Type Description Boolean IsPointerOverUIElement(GameObject, Vector2) Is cursorPos over this UI element? Declaration public static bool IsPointerOverUIElement(GameObject target, Vector2 cursorPos) Parameters Type Name Description GameObject target Vector2 cursorPos Returns Type Description Boolean"
  },
  "index.html": {
    "href": "index.html",
    "title": "Документация к игре Знаток Метро | Metro Connoisseur documentation",
    "keywords": "Документация к игре Знаток Метро Документация Данная страница содержит различную документацию к игре Знаток Метро"
  },
  "manual/achievements.html": {
    "href": "manual/achievements.html",
    "title": "Статистика | Metro Connoisseur documentation",
    "keywords": "Статистика Игра собирает различные статистические данные о вашем прогрессе и знаниях о метро: Количество ответов (Верных и неверных) Максимальное количество правильных ответов подряд Минимальное время ответа (Правильного) Среднее время ответа Максимальное время ответа (Правильного) Достижения Игра имеет ряд достижений, которые можно активировать выполняя различные условия Иконка Название Описание Знаток Ответьте на пять вопросов подряд верно Кто не ошибается, ... Ответьте на вопрос неверно Ой, оно упало Получить ошибку во время выполнения программы Новичек Ответьте на 10 вопросов верно Ученик Ответьте на 50 вопросов верно Пассажир Ответьте на 100 вопросов верно Машинист Ответьте на 200 вопросов верно Шустрый Правильно ответьте на вопрос за 7 секунд Мне надо подумать Правильно ответьте на вопрос за 80 секунд или более"
  },
  "manual/gameplay.html": {
    "href": "manual/gameplay.html",
    "title": "Игровой процесс | Metro Connoisseur documentation",
    "keywords": "Игровой процесс Приложение призвано помочь пользователю лучше ориентироваться в Московском метрополитене, узнать историю его создания и развития. Игра реализована в виде викторины с вопросами о станциях и ветках метрополитена с вариантами ответов. Игровое поле представляет собой интерактивную схему метро определенного временного промежутка, которая будет меняться в зависимости от текущего вопроса. Режимы игры Приложение предоставляет два режима игры — аркадный и исторический. Режимы отличаются игровым полем и составом вопросов. Реализован выбор уровня сложности, валяющего на количество попыток при ответе на вопрос. Аркадный Режим представляет собой бесконечную последовательность вопросов, объединенных по территориальному признаку (округ, линия метро). Пользователю предоставляется возможность воспользоваться подсказками, количество которых определяется сложностью игры. Исторический Режим позволяет проследить развитие Московского метрополитена с момента открытия первых станций Сокольнической линии в 1935 году до открытия западной и южной части БКЛ в декабре 2021 года. Вопросы в данном режиме объединены по временному периоду. В список вопросов дополнен вопросами исторического характера. Остальные правила совпадают с аркадным режимом. Виды вопросов Укажи где находится станция Данный вопрос спрашивает где на линий или в регионе находится станция. Подсказки Доступна 1 подсказака: Указать ближайшую станцию Помести станций в правильном порядке Данный вопрос спрашивает порядок станций на линий. На карте будут отображены все имена, но в неверном порядке. Необходимо расположить их так как они обычно находятся на линий Подсказки Доступна 1-2 подсказака: Указать направление от одной станций к другой Укажи где находится линия Данный вопрос спрашивает где находится линия. Задается только как первый вопрос в блоке вопросов. Подсказки Доступна 1 подсказака: Имя одной станции на этой линий"
  }
}